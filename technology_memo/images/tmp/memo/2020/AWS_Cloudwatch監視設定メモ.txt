
--------------------ノード監視--------------------
■EC2
ステータスチェックの種類
・システムステータス(System Status Checks)
・インスタンスステータス(Instance Status Checks)

ステータスチェックの表示
・コンソール
・コマンドライン(AWS CLI)

インスタンスステータスの報告(AWSに報告)
・コンソール
・コマンドライン(AWS CLI)

ステータスチェックアラームの作成と編集
・コンソールを使用したステータスチェックアラームの作成
・AWS CLI を使用したステータスチェックアラームの作成


ステータスチェックに失敗したときに以下が可能
・E メールで通知を送信
・インスタンスを停止、終了、または回復するアラーム

手順メモ
====================
EC2のコンソールにて、監視対象のインスタンスをチェック
↓
「Status Checks」タブを開き、「Create Status Check Alarm」ボタンをクリック
↓
以下を入力
・通知先メールアドレス(SNSトピック作成)
・通知する際の条件
  「2つのチェック項目いずれか」
  「5分毎」に「2回」チェックに失敗した他場合
====================

■RDS
  RDS イベントサブスクリプションにて、SNSトピックとソースタイプ(インスタンス)を指定

・DB インスタンス再起動
・DB インスタンスシャットダウン
・DB インスタンスのバックアップ
・DB インスタンスのバックアップ完了
など

--------------------ログ監視--------------------
■EC2
CloudWatch Logs にログを送るエージェントは以下の2種類が存在します。
・CloudWatch Logs エージェント
・統合 CloudWatch エージェント (ログファイルだけではなくカスタムメトリクスをCloudWatch Logs に送信可能)

手順メモ
====================
1.EC2（サーバー）の用意

2.IAMロールの作成 / アタッチ (EC2に)
各サーバーで CloudWatch Agentを実行する上で必要な IAM ロールを作成するには
・CloudWatchAgentServerPolicy  →各サーバーで CloudWatch エージェントを実行するため
・AmazonSSMManagedInstanceCore  →AgentインストールをAWS Systems Managerで行うため

管理者が Parameter Store に書き込むための IAM ロールを作成するには
・CloudWatchAgentAdminPolicy  →設定ファイルをパラメータストアへの書き込むため
・AmazonSSMManagedInstanceCore  →AgentインストールをAWS Systems Managerで行うため

  ★Agent の設定は AWS Systems Manager のパラメータストアに格納し、他サーバに展開させることが可能
    通常、全てのインスタンスがパラメータストアへの書き込み権限を持つ必要はありませんので、用途に応じて使い分けます。

3.SSM Agentの導入 (EC2に)
インストール＋起動
マネジメントコンソールの「AWS Systems Manager」-「マネージドインスタンス」画面で、
対象のインスタンスの表示を確認

4.CloudWatch Agentの導入 (EC2に)

5.CloudWatch Agentの設定

$ sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard

$ On which OS are you planning to use the agent?
$ 1. linux
$ 2. windows
$ default choice: [1]:

$ Trying to fetch the default region based on ec2 metadata...
$ Are you using EC2 or On-Premises hosts?
$ 1. EC2
$ 2. On-Premises
$ default choice: [1]:

$ Which user are you planning to run the agent?
$ 1. root
$ 2. cwagent
$ 3. others
$ default choice: [1]:

$ Do you want to turn on StatsD daemon?
$ 1. yes
$ 2. no
$ default choice: [1]:  ★StatsDは使用しない事とし、[2]とするかどうか

$ Which port do you want StatsD daemon to listen to?
$ default choice: [8125] ★StatsDなければ不要

$ What is the collect interval for StatsD daemon?
$ 1. 10s
$ 2. 30s
$ 3. 60s
$ default choice: [1]: ★StatsDなければ不要

$ What is the aggregation interval for metrics collected by StatsD daemon?
$ 1. Do not aggregate
$ 2. 10s
$ 3. 30s
$ 4. 60s
$ default choice: [4]: ★StatsDなければ不要

$ Do you want to monitor metrics from CollectD?
$ 1. yes
$ 2. no
$ default choice: [1]:★CollectDは使用しない事とし、[2]とするかどうか

$ Do you want to monitor any host metrics? e.g. CPU, memory, etc.
$ 1. yes
$ 2. no
$ default choice: [1]: ★OK

$ Do you want to monitor cpu metrics per core? Additional CloudWatch charges may apply.
$ 1. yes
$ 2. no
$ default choice: [1]: ★OK

$ Do you want to add ec2 dimensions (ImageId, InstanceId, InstanceType, AutoScalingGroupName) into all of your metrics if the info is available?
$ 1. yes
$ 2. no
$ default choice: [1]: ★OK


$ Would you like to collect your metrics at high resolution (sub-minute resolution)? This enables sub-minute resolution for all metrics, but you can customize $ for specific metrics in the output json file.
$ 1. 1s
$ 2. 10s
$ 3. 30s
$ 4. 60s
$ default choice: [4]: ★GetResourceと同じ間隔でよい？

$ Which default metrics config do you want?
$ 1. Basic
$ 2. Standard
$ 3. Advanced
$ 4. None
$ default choice: [3]:  ★Advancedを選択する

（ここで設定ファイルの内容が表示される）

$ Are you satisfied with the above config? Note: it can be manually customized after the wizard completes to add additional items.
$ 1. yes
$ 2. no
$ default choice: [1]:

$ Do you have any existing CloudWatch Log Agent (http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html) configuration file to import for migration?
$ 1. yes
$ 2. no
$ default choice: [2]: ★新規のため、CloudWatch Log Agent は存在しないため[2]でよい

$ Do you want to monitor any log files?
$ 1. yes
$ 2. no
$ default choice: [1]:

$ Log file path: ★「/var/log/messages」を入力します。

$ Log group name:
$ default choice: [messages] ★パスも明示させるため、「/var/log/messages」を入力

$ Log stream name:
$ default choice: [{instance_id}]

$ Do you want to specify any additional log files to monitor?
$ 1. yes
$ 2. no
$ default choice: [1]:  ★他のログ(/var/log/secure等)も追加するため[1]を選択する

（設定内容が表示される）

$ Do you want to store the config in the SSM parameter store?
$ 1. yes
$ 2. no
$ default choice: [1]:

$ What parameter store name do you want to use to store your config? (Use 'AmazonCloudWatch-' prefix if you use our managed AWS policy)
$ default choice: [AmazonCloudWatch-linux]

$ Trying to fetch the default region based on ec2 metadata...
$ Which region do you want to store the config in the parameter store?
$ default choice: [ap-northeast-1]

$ Which AWS credential should be used to send json config to parameter store?
$ 1. ASIAZRDYFXCLJONKBC7F(From SDK)
$ 2. Other
$ default choice: [1]:

$ Successfully put config to parameter store AmazonCloudWatch-CentOS-test.
$ Program exits now.

6.CloudWatch Agentの起動

[Run command] を選択します。

[Command document] リストで、[AmazonCloudWatch-ManageAgent] を選択します。

[ターゲット] 領域で、CloudWatch エージェントをインストールしたインスタンスを選択します。

[Action] リストで、[configure] を選択します。

[Optional Configuration Source] リストで、[ssm] を選択します。

「CloudWatch エージェント設定ファイルを作成する」で説明されているとおり、[Optional Configuration Location (オプションの設定場所)] ボックスに、作成して Systems Manager Parameter Store に保存したエージェント設定ファイルの名前を入力します。

これらのステップを完了した後、[Optional Restart] リストで、[yes] を選択してエージェントを開始します。

[Run] を選択します。

必要に応じて、[ターゲットと出力] 領域で、インスタンス名の横のボタンを選択して [View output (出力の表示)] を選択します。Systems Manager に、エージェントが正常に開始されたことが表示されます。

コマンドは成功しましたか? 失敗した場合は「出力の表示」でログを確認しましょう。


7.ログの確認
CloudWatch Agentが起動しているか、一応こちらを参考に確認しましょう。

$ sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status

また、以下も確認してみましょう。
・マネジメントコンソールのCloudWatch画面を開き、メトリクスに「CWAgent」が追加され、対象インスタンスのメトリクスが取得されていること
・マネジメントコンソールのCloudWatch画面を開き、ロググループに対象インスタンスのログが取得されていること
====================


■RDS

--------------------プロセス監視--------------------
■EC2

■RDS

--------------------リソース監視--------------------

■EC2
ログ監視と同様、CloudWatch Agentを導入
閾値監視


1)設定画面

EC2にてインスタンス作成後、EC2の[Instance]項目にてにてAlarm設定したいインスタンスを選択し、[monitoring]タブを選択します。

2)Alarm設定

右部分にある[Create Alarm]を選択すると、CreateAlarm画面が表示されるため、各項目を入力します。

Send a Notification to  →  別項目にて、SNS  topicを作成している場合、リストに追加されます(今回は追加しません)
Take the action  →  Alarm発生時のアクション。発生した場合どうするかを選択できます(今回は設定しません)
Whenever  →  リストより程度(Average,Max,Minimumなど)、および項目(CPU Utilization、Disk Usageなど)を選択します
Iｓ  →  閾値(○○パーセント以上or以下など)を設定します
For at least  →  判定条件(○分間毎に△回[Whenever]項目が[Is]だった場合にAlarmカウントする)を設定します
Name of Alarm  →  Alarm名を設定します

3)設定追加

各項目設定後、右下の[Create Alarm]を選択すると、Alarm項目が作成され、次の画面が表示されるので、リンクをクリックします。

4)項目追加確認

CloudWatch　Management　Console画面に遷移するため、項目が追加されたことを確認し、[Modify]タブをクリックします。

5)メール送信設定①

[Modify Alarm]画面が表示されるため、[Actions]項目の[+Notification]をクリックします。

■RDS

