

題名：ITインフラの開発者となるなるためには

1. なりたい自分をイメージする

1.1 どうステップを踏んでいけば？

私の経験上、独学でITインフラを学ぶにしても
技術的な資料はいくらでもあるのに対して、
それを設計するために、どのような考えを元に
設計していくべきか、資料がなく
苦悩し試行錯誤するしかないのが現実でした。

また実際、色々な会社である長い新人研修は
ITインフラの内容は薄く、
実務に繋がる技術を教えるわけではなく、
理屈ばかり教えられます。

では、考え方(設計思想)や導き方は、
どこにあるかと言うと
先人の思いの中でしかありません。

もちろん、設計書にきちんと思想や導き方を
記載している人はいますが、その背景までは
伺い知ることは出来ません。

思いの中と言う事は、しっかりと考えている
わけではないので、資料として残っていなく、
後輩にもうまく伝えたわりません。
結局、職人と一緒で先輩の背中を見て
成長の糧とするしかなかったのです。

もちろん、優秀な先輩の配下に配属されれば
今まで培った技術を教えてくれるでしょうが、
もしそうでなければ、同期との技術的な
差はあっという間に拡がるでしょう。

結局、暗中模索し仕事を覚えていくことになります。

そんな非効率な時間を過ごさないために
ITインフラ開発者を目指す人に
少しでも参考になるようにと
私の考えを書き記します。

もちろん私の経験則から記載するので
色々なベンダー、SIer、エンドユーザによって
違うので、一概に記載した内容が
全てマッチするとは思ってません。
(私も色々な現場で、困惑した覚えがあります。)

ですが、少なくとも流れや考え方は、
基本的に同じだと考えているので
参考にはなるかと思ってます。
(本当は、試行錯誤した方が身になるのだがｗ)


1.1 そもそもSEとは？ITインフラ開発者とは？

友人や親族に『お仕事は？』と聞かれると
SEと答える人が殆どでしょう。
(私は、具体的にこんなのを
作ってると話すことの方が多いですが)

SEと言っても、役割はいくつあるのだろうか？
と思う程、多種多様です。

『SE職の階層図』

そんな中、ITインフラ開発者は、


1.2 ITインフラ開発者の仕事とは？

多分、会社もしくは現場の先輩に
業務内容は？と聞くと
システムの基盤となる、『ネットワーク』、
『サーバ』、『ストレージ』等の
ハードウェアの近い内容や
『OS』、『通信制御』、『ミドルウェア』
『セキュリティ』等の業務アプリケーションや
運用に近い内容を設計・構築・試験・移行
すると答えるでしょう。

これだけ、聞いただけでも、
色々と覚えることが盛り沢山だと
感じるでしょう。

でも、これだけじゃないんです。
仕事をする上では、






1.3 まず、技術的な知識を得体なら以下を参考にするとよいだろう。

インフラエンジニアの教科書
https://www.amazon.co.jp/dp/4863541333/ref=cm_sw_r_li_awdb_c_orfwBbHQ7EPET

[24時間365日] サーバ/インフラを支える技術
https://www.amazon.co.jp/dp/4774135666/ref=cm_sw_r_li_awdb_c_fvfwBbA8DM3V8

インフラエンジニアの教科書2
https://www.amazon.co.jp/dp/4863541864/ref=cm_sw_r_li_awdb_c_7wfwBb7CBSDP4

マスタリングTCP/IP 入門編
https://www.amazon.co.jp/dp/4274068765/ref=cm_sw_r_li_awdb_c_2yfwBbQHRT2JY





2.ITインフラ設計とは
インフラ設計とは、システムのインフラすなわち業務アプリケーションが搭載される情報
システムの環境(コンピュータやネットワーク等)を設計することである。
ソフトウェア基盤、ハードウェア基盤までをシステム基盤(システムインフラ)と呼ぶ。

情報システムの全体構成を以下に示す。
    ┌──────────┐
    │ アプリケーション   │
    ├──────────┤
    │ 業務通信機能       │(業務通信の送達確認や再送、非同期通信、通信障害解析
    │                    │ログの生成など)
    ├──────────┤
    │ アプリケーション   │(業務のエラーハンドリング、文字コード変換、ユーザ認
    │ 共通の制御機能     │証、プリンタ制御)
  ┌├──────────┤
ソ｜│ システムの制御機能 │(クラスタリング、ホットスタンバイによるフェイルオー
フ｜│                    │バなど)
ト｜├──────────┤
ウ｜│ ミドルウェア       │(データベース、メッセージ連携、データ連携、トランザ
ェ｜│                    │クション処理、ジョブ管理)
ア｜├──────────┤
基｜│ OS                 │(ファイルシステム、デバイスドライバ、OS機能設計、起
盤｜│                    │動デーモン等)
  ｜├──────────┤
  ｜│ 仮想環境           │(仮想マシン、仮想I/F、仮想ディスク、割り当てCPU、
  └│                    │メモリ等)
  ┌├──────────┤
ハ｜│ ネットワーク       │(回線、ルータ、スイッチ、負荷分散、ファイヤウォール
ー｜│                    │など)
ド｜├──────────┤
ウ｜│ ストレージ         │(ディスク装置、テープ装置など)
ェ｜│                    │
ア｜├──────────┤
基｜│ サーバ             │(CPU、メモリ、I/Fなど)
盤└│                    │
    └──────────┘

2.インフラ設計の流れ
2.1　大まかな流れ
従来のウォーターフォール型開発の場合は提案、要件定義、基本設計（外部設計）、詳細
設計（内部設計）、構築、試験(テスト)と、移行いうそれぞれの開発工程の境が明確なの
に対し、アジャイル開発やプロトタイプ開発などは、これらの各工程の境目が曖昧で、
「目に見えるモノを作りながら仕様を固めていく」というスタイルを取るため下記のよう
な流れとはならないので注意が必要。
一般的にウォーターフォール型開発は、ベンダー及びSIerでは提案、要件定義、基本設計
までは上流工程と呼び、詳細設計(内部設計)、構築、試験(テスト)と、移行を下流工程と
呼ぶ。

全体の大まかな流れとしては以下のようになる。(ただしお客との合意を含め詳細な資料
については後に記載する。

<インフラ開発>
      ┌─────┐    顧客の要望を引き出し、要望に沿ったシステムに加え、より
      │   提案   │    効率的、将来的なビジョンを実現させるためのシステムを提案
      └─────┘    する。
            ↓
      ┌─────┐    顧客の将来的なビジョンを考慮し、全体的なシステム実現に
      │ 要件定義 │    向けての課題と、実際の運用に至るまでを総合的に分析し要
      └─────┘    件を整理します。
            ↓
      ┌─────┐    要件定義に基づき、各業務、ハード・ソフトウェア、ネット
      │ 基本設計 │    ワーク、データベース等、専門スタッフによりシステムの設
      └─────┘    計を行う。
            ↓
      ┌─────┐    基本設計に基づき、環境設計、パラメータを設計する。
      │ 詳細設計 │    
      └─────┘
            ↓
      ┌─────┐    システムの実装を行う。設計書に従いシステムの実装を行う。
      │   構築   │    
      └─────┘    
            ↓
      ┌─────┐    開発したシステムが要件通りであるか、品質検査を行う。こ
      │   試験   │    の際、システム全体として運用が要件通りであるかの検査も
      └─────┘    行う。
            ↓
      ┌─────┐    システムを稼働させるにあたり、システムをどのように移行さ
      │   移行   │    せるか、データをどのように移行させるか、運用を引き継ぐた
      └─────┘    めに運用手順
            ↓
      ┌─────┐    システムを導入したも、要件通りのシステム稼働を行うため
      │ 運用保守 │    の運用支援、保守作業まで支援する。
      └─────┘

2.2.上流工程までの詳細な流れ
RFIから基本設計までの顧客とのやりとりを踏まえた詳細な流れは以下のようになる。
各工程で記載すべき内容については後記する。

       (ユーザ)                 (ベンダ)
┌───┐                  │                    ┌───┐
│ RFI  │────────→│─────────→│ 受領 │
└───┘                  │                    └───┘
                            │                        ↓
┌───┐                  │                    ┌───────────┐
│ 受領 │←────────│──────────│ 情報提供、概算見積り │
└───┘                  │                    └───────────┘
    ↓                      │
┌─────┐              │
│ 要求定義 │              │
└─────┘              │
    ↓                      │
┌───┐                  │                    ┌───┐
│ RFP  │─────────│─────────→│ 受領 │
└───┘                  │                    └───┘
                            │                        ↓
┌───┐                  │                    ┌────────┐
│ 受領 │←────────│──────────│ 提案書、見積り │
└───┘                  │                    └────────┘
    ↓                      │
┌─────────┐      │
│提案内容の比較評価│      │                    ┌─────┐
│調達先選定        │───│─────────→│ 契約締結 │
└─────────┘      │                    └─────┘
                            │                        
┌─────┐              │                    ┌───┐
│要件定義書│───────│─────────→│ 受領 │
└─────┘              │                    └───┘
                            │                        ↓
┌───┐                  │                    ┌─────┐
│ 合意 │←────────│──────────│要件確認書│
└───┘                  │                    └─────┘
                            │                        ↓
┌───┐                  │                    ┌──────┐
│ 合意 │←────────│──────────│ 開発計画書 │
└───┘                  │                    └──────┘
                            │                        ↓
┌───┐                  │                    ┌──────┐
│ 合意 │←────────│──────────│ 基本設計書 │
└───┘                  │                    └──────┘


                            │                        ↓
                            │                    ┌──────────┐
                            │                    │ システム詳細設計書 │
                            │                    └──────────┘
                            │                        


●RFI(Request for Infomation,情報提供依頼書)
入札や調達の事前準備として、ベンダーに情報の提供をしてもらうための依頼書。

●情報提供、概算見積り
RFIの回答は、製品カタログ、パンフレット、事例集等で、価格も精緻な見積もりではなく
標準価格や参考価格。その為、回答期限は１～２週間程度。

●要求定義(要求仕様書)
「～がしたい」という利用者の希望、ビジネスで何が必要かを記述したもので
事業運用をオペレーションレベル考えそれを実現するコンピュータシステムへの要求
顧客が作成する。RFPとほぼ同じ。違いがあるとすれば、RFPにはプロジェクト要件や
見積り条件が含まれるが、要求仕様書には含まれない。要求仕様書には機能要求、非機
能要求が記載されている。

●RFP(Request for Proposal,提案依頼書)
ベンダーにシステムの提案書を作成してもらうための依頼書。
提案の範囲、骨組みとなる要件、必要条件、十分条件を明確に定義する。逆にベンダー
から自由に提案してもらう部分は限定的にする。当然、見積もり金額は精緻である事。
また、業務とその流れを表現するもの(業務フロー、業務機能関連図、ERD、クラス図等)

●提案書
RFPを元にシステムの提案だけでなくプロジェクト推進に関わる合意ポイント、方法、
納品物の取り決め。
それにかかるハードウェア、ソフトウェア、納品物、期間や人件費の見積りも含め提示
する資料。

●要件定義書
システムの範囲を決定する。何を作って何を作らないかを明確にすること。
システムの機能やＤＢ・通信などの利用方法など開発する側が作成する。
RFP／要求仕様書を元に、要求の粒度を揃え、要求に対する仕様
を記載して要件とし、顧客の利害関係者と合意を取るもの。

※要件定義書は本来、顧客が作成するものなのだが、実情は要求定義書及びRFPから
開発側が作成し顧客と合意の上、次行程に移る。

●要件確認書
要件定義書を元にベンダーとしての実現方法と実現可否を合意するための資料。

●開発計画書(プロジェクト計画書)

●基本設計書


●RFPの業務要求と要件定義に書く内容は基本的に同じ
では、RFPと要件定義書に書く内容はどう違うのか。これをきちんと説明するのは意外
に難しい。
要件定義は設計の基になる情報なので、一般的にはRFPよりも要件定義のほうが詳細な
内容になる。しかし場合によっては、要件定義を終わらせた段階でRFPを書くケースも
ある。自社で要件定義まで行って、それをベースにベンダーに発注する場合だ。これが
できるのは一部の大手企業など限られたケースだが、そのまま設計に使えるレベルのRFP
であれば、それに対するベンダーの提案も、より精度の高いものになるだろう。

それでも、RFPと要件定義に書くべき内容は、きちんと区別すべきだ。「RFPと要件定義
では、それぞれのドキュメントを書く目的が明確に違う」からだ。

RFPの最終的な目的は「提案内容と見積もりから最適なベンダーを選定して調達を適正に
行うこと」であり、要件定義は「システム開発の要求仕様を業務の観点から定義するこ
と」が目的である。書く内容は、その目的を踏まえたものになる。
「RFPは詳細さよりも網羅性を重視し、要求の優先順位を明確にする。現行システムに
ついて説明するときは、問題点だけでなく基本機能についてもきちんと記述する」と、
作成時に最低限押さえておくべきポイントを挙げる。


┌─────┐ input  ┌─────────┐        ┌───────┐
│ 顧客要求 │———→│マスターテスト計画│———→│受け入れテスト│
└─────┘        │受け入れテスト計画│        └───────┘
                      └─────────┘              ↑
                                ↓                        ↑
┌─────┐ input  ┌─────────┐        ┌───────┐
│ 要件定義 │———→│システムテスト計画│———→│システムテスト│
└─────┘        └─────────┘        └───────┘
                                ↓                        ↑
┌─────┐ input  ┌─────────┐        ┌───────┐
│ 基本設計 │———→│結合テスト計画    │———→│結合テスト    │
└─────┘        └─────────┘        └───────┘
                                ↓                        ↑
┌─────┐ input  ┌─────────┐        ┌───────┐
│ 詳細設計 │———→│単体テスト計画    │———→│単体テスト    │
└─────┘        └─────────┘        └───────┘
                                ↓                        ↑
┌─────────────────────────────────┐
│                            コーディング                          │
└─────────────────────────────────┘




