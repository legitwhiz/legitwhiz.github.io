サーバレス&FaaSソリューション

友人が勉強していた内容に触発され、
まずはサーバレスがなんなのか？
FaaSとはなんなのか？
また、これらに関連し押さえておかなきぇいけない技術とは？
というところから調査してみました。


●サーバレスとは？

「サーバレス」とは、アプリケーションの実行に必要なサーバの環境構築と管理を気にせず開発できることを意味する言葉で、サーバを必要としないわけではない。

必要なサーバなどのインフラはクラウドに管理を任せ、データベース、メッセージング、認証など、開発に必要な機能だけを開発者が選択し、開発者はプログラミングに専念できるようになる。

●FaaSとは？

FaaS（Function as a Service）は、この仕組みをさらに進化させたもの。

イベントドリブン方式でサービス（ある機能を実現するプログラム）のコードを書き、それを連携させるだけで、一連の業務処理を実行できる。

実行に必要なサーバは、このサービスが自動で割り当て、必要に応じてスケールする。

書いたコードはコンテナ上で実行し、終了されると即座に廃棄される。

重要なことは、ファンクションは
実行時にコンテナが生成され、
終了時に破棄されるので、
常駐しているプロセスはない。
ここがポイントです。

普通、アプリケーションサーバのような
プロセスが常駐していて、コードを
デプロイするとこのサーバ上で
コードが実行されるのですが、
FaaSでは実行時にコンテナが生成され
終了時に破棄される。

これはコンテナの生成の
オーバーヘッドが小さいおかげです。

また、ステートレスという性質は
アプリケーションによい影響を
もたらしている。
それはShared Nothingなので、
障害が発生しても他の
アプリケーションに影響はない。
コンテナ1つで処理しきれなければ、
コンテナを100個起動して
処理すればいいので、
スケールが簡単なのだ。

●FaaSの課金方法

コンテナの実行は100ms単位で計測され、使った分のサーバ使用料が課金されるため、一般のIaaSのように使う・使わないに関わらずサーバを立ち上げている時間に課金されるのと異なり、コスト削減が期待できる。

よって、両者を24時間使い続けた場合は、
FaaSよりIaaSのほうが
コストは安くなってしまうので
一時的なサービスや使用頻度の
少ないサービスの使用に向いている。

PaaS(Platform as a Service)との違いは、
PaaSがリクエストごとにアプリケーション全体を
起動・終了させる「リクエストリプライ方式」を、
FaaSは必要なサービス毎に起動・終了させる「イベントドリンブン方式」を狙ったものであることです。

そのため、FaaSであらゆるアプリケーションを作れるというわけではなく、ECサイトやマーケティングサイトのように負荷予測が難しく、ダイナミックな負荷の変動に対応しなければならないアプリケーションに向いているといえるでしょう。

●FaaSのメリット

FaaSを使うのメリットは、コストの削減、スケーラビリティの確保、インフラの運用管理を不要にすることです。

ナノサービスとも相性が良く、それを実現する手段としても注目されています。
マイクロサービスが比較的小さなビジネス機能を解決するためのプロセスだとすれば、ナノサービスはそれぞれの機能の一部を扱うものだ。

●FaaSプロバイダ
・AWSのLambda
・GoogleのCloud Functions
・MicrosoftのAzure Functions
・Apache　OpenWhiskを使ったIBMのサービス
・Iron.io(IronFunctions)
・Webtask
・Fn Project
・OpenFaaS
・Kubeless
・fission
等

●サーバレス&FaaSソリューションにおける重要キーワード

・マイクロサービスアーキテクチャ（MSA）
システムを複数のサービスの集合体として構成し、サービス相互をRESTful Web APIのようなシンプルで軽量な手段で連携する手法です。その最大のメリットは、小規模なサービス群を疎結合する作りにすることにより、「一枚岩」（モノリシック）のシステムの複雑さから自由になることです。つまり、マイクロサービスの考え方を導入することで、変化に強いシステムを作ることができるのです。

・サービス指向アーキテクチャ（SOA）

複雑化し、また個別分野ごとに“サイロ化”して変更が難しくなった企業情報システムを、サービスの集合として再定義し、変化に対応しやすいシステムにしようという掛け声が高まり、その解決策として期待されていたのがSOAだったのです。

サーバレス、FaaSとは直接関係はないが比較として、よく出てくる。

・ナノサービス
ナノサービスは，サービスの粒度が過度に小さくなったアンチパターンです。(通信やメンテナンスなどの)オーバーヘッドがその有用性を上回るサービスがナノサービスなのです。

・リクエストルーティング機能
リクエスト毎に処理する先を決める、負荷分散する機能。
Web:Webサーバ、プロキシ
マイクロパッチ:Pub/Sub、キューイング
ワークフロー制御:オーケストレータ

・SAML
Security Assertion Markup Languageの略称であり、OASISによって策定された異なるインターネットドメイン間でユーザー認証を行うための XML をベースにした標準規格です。

・OpenID Connect
OpenID Connectとは、インターネット上にある様々なWebサイトや、モバイルアプリなどを利用する際に一つのIDで認証を実現できるようにするID連携の仕組み。

facebookやgoogleがOpenID Connectを使用している。

・BaaS
バックエンドをサービスとして提供
データベース、メッセージング、各種Web等

・API Gateway
Web APIを使ったクラウドインテグレーションのためのアーキテクチャスタイルのひとつです。 企業ネットワーク内にデプロイされたアプリケーションとインターネット上のパブリックなクラウドサービスとの間に、ゲートウェイとして機能するコンポーネントを配置し、すべての通信をそのゲートウェイ経由で行います。

・Twilio
Twilioとは、ソフトウェア開発者が自社のWebサービスAPIを使って電話やテキストメッセージの送受信をプログラムすることを可能にしている。


●UIドリブンアプリケーション

従来の構成
client → APサーバ → DataBase

FaaSを使った構成
client → 認証ロジック(BaaS)
           → API Gateway
           → 各サービスの関数
