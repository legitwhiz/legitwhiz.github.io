疎結合と密結合

疎結合、密結合とは、

疎結合（そけつごう）
他と結びつきが弱い構造で独立性が強い状態を示す。
ITでは、主にコンポーネント同士の結びつきが弱い状態を示す。

密結合（みつけつごう）
他と結びつきが強く依存する構造で独立性が弱い状態を示す。
ITでは、コンポーネント同士が密接に結合していて分離すると動かない状態を示す。


一般的にソフトウェアの部品は密結合な方が理解しやすいし、テストもしやすいから品質も高いと言われています。
ですが、頭の良い人は、分割して整理して理解できる形にするのが上手いのである。だから、頭の良い人ほど疎結合にしたが。


歴史は繰り返す
ソフトウェアのアーキテクチャの流行りを調べてみると同じようなことを言葉を変えて繰り返しているのが分かります。

「構造化プログラミング」→「オブジェクト指向プログラミング」→「マイクロサービス」
だが、部品同士の結合度が弱くしていくと、部品同士の通信に計算コストがかかり結果的に性能劣化する。

なぜ疎結合な設計をする必要があるのか？

拡張に柔軟に対応するためである。


拡張性とは
ソフトウェアの拡張性とは「いかに変更に容易に適応できるかどうか」である。
依存関係が多いと、あるプログラムの変更が他のプログラムに影響を及ぼし、変更を行うごとに大量のテストが必要になる。
依存関係をなるべく少なくすることで、変更の影響を少なくすることが、拡張性を高めるための第一の方法である。
拡張性を高めるには、以下の様な観点がある。
・分離
→コンポーネントが独立して変更できること
・集中化
→機能を集中させること。ある機能が複数のコンポーネントに分散していると、単純な変更が多くのコードに影響を及ぼす可能性がある。
・再利用
→共通機能を再利用可能なコンポーネントでカプセル化する。

