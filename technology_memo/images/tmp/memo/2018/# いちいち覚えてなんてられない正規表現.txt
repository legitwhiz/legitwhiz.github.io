# いちいち覚えてなんてられない正規表現

正規表現はテキスト処理に
大変便利なわけですが、

正規表現をいちいち覚えてられないし
ググったりするのも面倒なので
使いそうなのを自分のための
備忘録として、まとめてみました。

(と言っても先人達のコピペですが…w)

## ● 1.基本のメタキャラクタ

メタキャラクタにより
任意の1文字や任意の半角数字など
を指定することができます。

メタキャラクタ意味

|表現        |意味                                              |
|:--------------|:-----------------------------------------------|
|.               |改行を除くすべての文字          |
|A|B          | 左右の文字列のいずれか         |
|¥X           |直後のメタ文字をエスケープ  |
|                |する                                              |
|[xyz]        |指定された文字のどれかに      |
|                |一致                                              |
|[a-z]        |マッチする文字の範囲を          |
|                |指定する表現                              |
|[^X]         |カッコ内で指定した文字以外  |
|                |のいずれかの一文字                  |
|(X)          |カッコ内のパターンにマッチ  |
|                |した文字列を後方参照できる  |


## ● 2.量指定子

量指定子は、文字の後ろに配置し、
前の文字が何回出てくるのか
を指定します。
例えば、0回以上の繰り返しに
マッチする量指定子*を

```
Go*gle
```

のように使うと、Ggle,Gogle,Google,Gooogle
などに一致します。
カッコで囲むことにより
繰り返す文字列も
指定することができます。

```
(Google)*Apple 
```

であると、Apple, GoogleApple, GoogleGoogleApple
という文字列に一致します。

量指定子
|最長一致|最短一致 |意味                             |
|:--------------|:--------------|:--------------------------------|
|*               |*?             |直前のパターン        |
|                 |                |の0回以上連続          |
|+               |+?            |直前のパターン        |
|                 |                |の1回以上連続          |
|?               |??            |直前のパターンの     |
|                 |                |0回か1回の出現        |
|{N}           |-               |直前のパターンの    |
|                 |                |N回の連続                 |
|{min,}      |{min,}?     |直前のパターンの    |
|                |                 |min回以上の連続     |
|{,max}     |{,max}?    |直前のパターンの    |
|                |                 |max回以下の連続    |
|{min,max}|{min,max}?|直前のパターン   |
|                |                 |のmin回からmax回 |
|                |                 |の連続                        |


例えば

・4桁の数字ならば
 [0-9]{4}

・4桁以上の数字
[0-9]{4,}

・4桁-8桁の数字 
[0-9]{4,8}

・8桁以下の数字
 [0-9]{,8}

・2000 以上、2018 以下の数字
 20[01][0-8]

・携帯電話番号。
ハイフンを利用しても、
しなくてもどちらでも良い。
 0[89]0-?[0-9]{4}-?[0-9]{4}


## ● 3.アンカー(位置指定子)

文字列の先頭や末尾に
特定の文字がある文字列も表現できます。

アンカー意味
|表現     |意味                                             |
|:----------|:-----------------------------------------------|
|^           |行頭の位置                                 |
|$           |行末の位置                                 |
|\b         |単語境界の位置                         |
|\B         |非単語境界の位置                     |
|\A         |検索対象文字列の開始位置     |
|\Z         |検索対象文字列の終了位置     | 
|             |改行があれば、改行の直前     |
|\z         |検索対象文字列の終了位置     |
|\G        |マッチングの開始位置              |

## ● 4.エスケープシーケンス

バックスラッシュは通常は、
特殊文字をエスケープするため
に使われますが、それ以外にも
「非表示文字（制御コードなど）
を表現する」ためや、
「包括的な文字型」を文字クラス
のように表現したりできます。
これらはエスケープシーケンス
と呼ばれます。

|表現  |意味                                                    |
|:--------|:-----------------------------------------------------|
|\s      |空白文字                                            |      
|          |(半角スペース、\t、\n、\r、\f)    |
|          |( |\t|\n|\r|\f)と同義                           |
|\S      |空白文字以外のすべての文字        |
|\d      |数字。[0-9]と同義                            |
|\D      |数字以外の文字列。[^0-9]と同義  |
|\w      |すべてのアルファベットと           |
|          |アンダースコアのうち任意の        |
|          |一文字。[a-zA-Z0-9_]と同義           |
|\W     |すべてのアルファベットと            |
|          |アンダースコア以外の１文字        |
|          |[^a-zA-Z0-9_]と同義                         |
|\l       |すべての半角英小文字のうち        |
|          |１文字                                               |
|\L      |すべての半角英小文字の以外       |
|          |の文字１文字                                   |
|          |(大文字、数字、全角など)            |
|\u      |すべての半角英大文字の               |
|          |うち１文字                                       |
|\U      |すべての半角英大文字以外の       |
|          |１文字(小文字、数字、全角など)|
|\n      |改行                                                   |
|\t       |タブ                                                   |

## ● 5.先読み・後読みの言明（Assertion）表現

特定のパターンに対して、
その前方・後方で追加的な別の
マッチングを吟味します。
マッチとして検出するかどうか
を決める記法です。
カッコ内に記載した追加パターンは
テストに使われるだけで
消費(Consume)されず、
後から参照することができません。


|表現              |意味                                           |
|:-------------------|:---------------------------------------------|
|(?=pattern)  |肯定先読み前方の文字列が   |
|                      |patternに一致するとき、      |
|                      |その位置にマッチ                   |
|(?<=pattern)|肯定後読み後方の文字列が   |
|                      |patternに一致しないとき、  |
|                      |その位置にマッチ                   |
|(?!pattern)   |否定先読み前方の文字列が   |
|                      |patternに一致しないとき、  |
|                      |その位置にマッチ                  |
|(?<!pattern) |否定後読み後方の文字列が   |
|                     |patternに一致するとき、      |
|                     |その位置にマッチ                   |

先頭に「^」を入れると
「パターンの否定」の「否定先読み」
「否定戻り読み」となります。


## ● 5.キャプション

マッチしたい文字列の一部を
再利用する場合には
キャプションという機能を
使うことで達成出来ます。

たとえば#や$で囲まれた文字を
マッチしたいときには

```
([#$]).+\1 
```

とすることで、#Google#や$Google$に
一致します。
つまりキャプチャは()で囲ったところに
出現した文字をキャプチャし
\1という変数に入れてマッチを
行うという機能になります。

キャプチャは複数使うことができます。
例えば

(a)(b)c(\2)(\1) 

であればabcbaという
文字列に一致します。
キャプチャは()で囲った順番で
変数\1,\2,\3,...と代入されます。

キャプチャされるのを
抑制する場合には(?:pattern)とします。


● 6.文字
半角英数字等(a~z,A~Z,_,1~9)
\w 

ひらがな
\p{InHiragana} 

カタカナ
\p{InKatakana} 

漢字（色々な書かれ方があるが、コレが完璧で全てを含む）
[\x{2E80}-\x{2FDF}々〇〻\x{3400}-\x{4DBF}\x{4E00}-\x{9FFF}\x{F900}-\x{FAFF}\x{20000}-\x{2FFFF}] 

記号：!"#$%&'()*+,-./:;<=>?@[]^_`{
\p{Punct} 

文字全体（半角英数字・ひらがな・カタカナ・漢字）
[\w\p{InHiragana}\p{InKatakana}\x{2E80}-\x{2FDF}々〇〻\x{3400}-\x{4DBF}\x{4E00}-\x{9FFF}\x{F900}-\x{FAFF}\x{20000}-\x{2FFFF}] 


## ● 7.特定文字列

- Emailアドレス
^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$

- ドメイン名
^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$

- インタネットURL
^(http|https)://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$

- ユーザー名 (Twitter username)
^[a-zA-Z0-9_\-.]{3,15}$

- 固定電話
^0\d-\d{4}-\d{4}$

- 携帯電話
^(070|080|090)-\d{4}-\d{4}$

- IP電話
^050-\d{4}-\d{4}$

- フリーダイヤル
^0120-\d{3}-\d{3}$

- パスワード(大文字小文字英数字組み合わせ、特殊文字禁止、長さは8-10
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$

- 日付 (YYYY-MM-DD)
^\d{4}-\d{1,2}-\d{1,2}$

- 郵便番号
^\d{3}-\d{4}$

- XML
^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$

- 空白行
\n\s*\r

- 先頭後尾空白文字
^\s*|\s*$

- IPアドレス
\d+\.\d+\.\d+\.\d+

- IPアドレス
((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))

- 数字
^[0-9]*$

- N桁数字
^\d{n}$

- N桁以下数字
^\d{n,}$

- M-N桁数字
^\d{m,n}$

- ゼロから始まる数字
^(0[0-9]*)$

- ゼロ以外から始まる数字
^([1-9][0-9]*)$

- 小数点以下1-2位数字
^(\-)?\d+(\.\d{1,2})?$

- 正整数
^[1-9]\d*$

- 負整数
^\-[1-9]\d*$

- 英数字
^[A-Za-z0-9]+$

- 長さが3-20の全ての文字
^.{3,20}$

- 大文字小文字26英字
^[A-Za-z]+$

- 大文字26英字
^[A-Z]+$

- 小文字26英字
^[a-z]+$


こんなの、イチイチ
覚えてられないよ…w

## ●参考
#085　正規表現の落とし穴
http://www.ne.jp/asahi/futohen/sankaku/h085.htm

