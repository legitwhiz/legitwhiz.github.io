awkで書式を指定して出力
RHEL7,CentOS7で使われるawkは、gawkというものです。
※Ubuntu16ではmawk

printfで使用できる主な書式制御文字

┌──────┬─────────────────────────────┐
│書式制御文字│意味                                                      │
│%d          │十進整数、%iも使用可                                      │
│%e          │指数形式、%Eの場合Eが大文字で出力される                   │
│%f          │小数点を使用した形式、桁数は「%4.3f」のように指定する     │
│%g          │%fか%eで短くなる方、%Gの場合%E同様Eを大文字で出力         │
│%o          │符合なしの八進数                                          │
│%x          │符合なしの十六進数、%Xの場合アルファベットを大文字時で出力│
│%c          │ASCIIキャラクタ、例えば「65」をいう数値を「A」と出力      │
│%s          │文字列                                                    │
└──────┴─────────────────────────────┘
※それぞれ「%3d」のように出力する桁数を指定できる。左ぞろえの場合は「-」記号を付けて「%-3d」のように指定。
※書式設定の中で%という文字を使いたい場合は「%%」のように書く。

書式制御とは、元あるデータを整形したり変換したりして出力するものです。
 下記に、「sample.txt」のフィールドセパレータを「,（カンマ）」とし、１つのフィールドを右寄せの10桁で表示させてます。

 $ cat /tmp/sample.txt <LF>
 DATA_11,DATA_12,DATA_13,DATA_14,DATA_15
 DATA_21,DATA_22,DATA_23,DATA_24,DATA_25
 DATA_31,DATA_32,DATA_33,DATA_34,DATA_35
 DATA_41,DATA_42,DATA_43,DATA_44,DATA_45
 DATA_51,DATA_52,DATA_53,DATA_54,DATA_55
 $ cat sample.txt |
 > awk -F',' '{printf "%10s %10s %10s %10s %10sn",$1,$2,$3,$4,$5}' <LF>
    DATA_11    DATA_12    DATA_13    DATA_14    DATA_15
    DATA_21    DATA_22    DATA_23    DATA_24    DATA_25
    DATA_31    DATA_32    DATA_33    DATA_34    DATA_35
    DATA_41    DATA_42    DATA_43    DATA_44    DATA_45
    DATA_51    DATA_52    DATA_53    DATA_54    DATA_55

書式制御
awkを通すと、色々な書式(フォーマット)で結果を出力することが可能です。

$ echo 65 |
 > awk '{printf "%cn",$1}' <LF> <= 数値をASCIIの1文字で出力。(数値以外は最初の1文字を表示)
A
 $ echo -65.5 |
 > awk '{printf "%dn",$1}' <LF> <= 10進数(整数)を出力。(「%i」も同じ意味)
-65
 $ echo 65.5 |
 > awk '{printf "%en",$1}' <LF> <= 指数形式で出力。(「%E」で指数を示す部分が大文字)
6.550000e+01
 $ echo 65 |
 > awk '{printf "%fn",$1}' <LF> <= 小数点形式で出力。
65.500000
 $ echo 0.00009 |
 > awk '{printf "%gn",$1}' <LF> <= 「%e」か「%f」で文字数が少ない方を出力。(「%E」で指数を示す部分が大文字)
9e-5
 $ echo ８ |
 > awk '{printf "%on",$1}' <LF> <= 符号なしの8進数(整数)で出力。
10
 $ echo 65 |
 > awk '{printf "%sn",$1}' <LF> <= 文字列を出力。
65
 $ echo -1 |
 > awk '{printf "%un",$1}' <LF> <= 符号なしの10進数(整数)を出力。
18446744073709551615
$ echo 10 |
 > awk '{printf "%xn",$1}' <LF> <= 符号なしの16進数(整数)を出力。(「%X」で出力される英字が大文字)
a
 $ echo % |
 > awk '{printf "%%n",$1}' <LF> <= 「%」を出力。
%


書式を指定する「%」と制御文字の間にオプションパラメータを指定することも可能です。
 下記に、いくつかの例をメモッてます。

$ echo 65,66 |
 > awk -F',' '{printf "%10d,%10dn",$1,$2}' <LF> <= フィールドを10桁幅で出力する(右寄せ)
        65,        66
 $ echo 65,66 |
 > awk -F',' '{printf "%-10d,%-10dn",$1,$2}' <LF> <= フィールドを10桁幅で出力する(左寄せ)
65        ,66        
 $ echo 65,66 |
 > awk -F',' '{printf "%010d,%010dn",$1,$2}' <LF> <= 空白を「0」でパディングして出力する
0000000065,0000000066
 $ echo 7,8 |
 > awk -F',' '{printf "%#5o,%#5on",$1,$2}' <LF> <= 8進数で先頭に「0」をプレフィックスする
   07,  010
 $ echo 9,10 |
 > awk -F',' '{printf "%#5x,%#5xn",$1,$2}' <LF> <= 16進数で先頭に「0x」をプレフィックスする
  0x9,  0xa
 $ echo 10,-10 |
 > awk -F',' '{printf "% 5d,% 5dn",$1,$2}' <LF> <= 負の数の時に「-」をつける
   10,  -10
 $ echo 10,-10 |
 > awk -F',' '{printf "%+5d,%+5dn",$1,$2}' <LF> <= 負の数の時に「-」で正の数の時「+」をつける
  +10,  -10
$ echo takam |
 > awk '{printf "%.4sn",$1}' <LF> <= 4文字を出力する
taka
 $ echo 65.001 |
 > awk '{printf "%.4en",$1}' <LF> <= 小数点から4文字を出力する
6.5001e+01
