PAMの役割

PAM(Pluggable Authentication Modules)はUNIX系OSで認証を一元管理する
仕組みで、プログラムに対してユーザ認証のための機能を提供する。
PAMの設定ファイルは、ユーザ認証を行うプログラムごとに用意されており、
/etc/pam.dディレクトリ以下に配置されている。

 設定ファイルの書式と例は以下のような感じ。

書式
モジュールタイプ コントロール モジュールのパス 引数
#------------------------------------------------------------------------------
$ cat /etc/pam.d/login
 auth　　　　include　　system-auth
 account　　required　　pam_nologin.so
 account　　include　 　system_auth
　：
 （略）
session　　required　　pam_loginuid.so
 session　　optional　　pam_console.so
　：
 （略） 
#------------------------------------------------------------------------------
モジュールタイプだのコントロールって、何なの？・・・はい、以下に説明を。

■モジュールタイプ
 その行でモジュールが使用する認証の型

●auth
ユーザ認証を行う。パスワードを使った認証は、このモジュールタイプが
指定されたモジュール（プログラム）が行う。

●account
パスワードが有効期限内か、ユーザによるサービスへのアクセスが許可
されているのかなど、ユーザ認証ができるのかどうかを確認する。

●password
パスワードの設定と変更に使用。

●session
ユーザ認証の前後に実行すべき処理を指定。

■コントロール
認証が成功もしくは失敗したときの処理を指定

●requisite
モジュールの実行に失敗したらすぐに認証を拒否する。
 認証に失敗した段階で先に進ませない必要がある場合に指定。

●required
モジュールの実行に失敗してもすぐには拒否せず、同じタイプのモジュールが
全て完了してから拒否する。この段階で認証結果が通知されるので、
ユーザ側ではどの段階で失敗したかわからない。
このため、セキュリティ上 requisiteより好ましい。

●suficient
モジュールの実行に成功した場合、より上位のrequired行すべて成功であれば、
その時点で認証を成功とする。失敗した場合は引き続き評価を行う。

●optional
 optionalを指定したモジュールタイプが１つだけの場合を除き、
PAMアプリケーションに影響を与えない。

requisiteとrequiredの違いに注目、ですね。
 最後のoptionalは何度読み返しても意味が分からなかった。
 今は調べている時間もないので、別の機会に追記しよう（覚えていれば。。）
/etc/securityディレクトリ以下にも認証に関る設定ファイルが置かれていることを
 ついでにメモしておく。

●PAMモジュールについて
 いろいろあるが、新出題範囲の対象になっているものだけメモしておく。
PAMで使用されるモジュールは/lib/securityディレクトリ以下に格納されている。

pam_unix.so　通常のパスワード認証を行う
pam_cracklib.so　パスワードの安全性を向上させる
pam_limits.so　ユーザが利用できるリソースを制限する
pam_listfile.so　特定ユーザのログインにおいてリストを利用 

PAMモジュールについてはこちらに詳しい説明があり、参考になる。
 特にパスワード攻撃へのセキュリティを向上させるというpam_cracklib.soに
関する説明は興味深い。

PAMのことは薄ーく知ってはいたが、改めてこうして勉強してみると普段何気なく
行っているログインやsuコマンドにも、様々なモジュールが動いているのだな、と分かる。
うーむ、PAM、深いヤツだな

###############################################################################
PAMによるアクセス制限

sshでのアクセス制限は、sshd_configに直接記述する他、PAMの設定でも可能。（/etc/hosts.allowでもある意味可能なはずだが、hosts.allowというだけあってホスト単位の制限が基本なので、ここでは割愛）
sshd_configに記述する方法は、変更の都度sshdを再起動しなくてはいけない。ここで万が一失敗するとsshログイン自体ができなくなってしまうため、アクセス制御のためにちょくちょく中身を変えるような運用は極力避けたいところである。というか、やりたくありません。
ちなみにログイン中のターミナルには影響はない。でも、突然ネットワークの不具合で切断されるかもしれないし、、、世の中何が起こるか分からないのだ。

PAMの設定でいくのであれば、以下のようにする。（sshd_configにおいて、PAMが使えるようUsePAM yesになっている必要がある）

# vi /etc/pam.d/sshd
以下を追記
account required /lib/security/pam_access.so

ちなみに、64bit版サーバの場合は/lib64/security/pam_access.soとなるので注意。
それとともに、/etc/security/access.confにアクセスコントロールを定義する。以下は、adminグループに所属しているユーザ以外はアクセスできない設定となる。先頭を+にすれば許可、-で拒否。複数のグループを指定する場合は空白で区切る。ユーザ名のみ、グループ名／ユーザ名混在でもOK。

-:ALL EXCEPT admin :ALL

この場合はsshd_configを再起動しなくてよい。どの時点で反映されるかというと、ファイルが保存されたタイミングで有効になる。なので、ある意味これもリスクはある。例えば、リモートで管理マシンから複数のマシンに一斉に設定ファイルを配布した場合、そのファイルに記述ミスがあればその時点でsshログインが不可能になる。
しかし、それでsshdが落ちるわけではないので、環境によってはリモートからの復旧はどうにか可能ではある。「ログイン」はできなくともsshでコマンドを実行したり、scpでリストア用のファイルを転送したり、は可能だったりするので。（scpもsshで接続していることに変わりないのだが、ログイン時とは動いているモジュールが違うせい？）少なくとも、sshdの再起動に失敗して完全にsshdが落ちてしまい、リモートログインが完全に不可能になるよりはマシである。とはいえ、しつこいが「環境による」。
ちなみにsshd_configを編集した時は、/usr/sbin/sshd -tで構文テストしてくれる。構文に問題なければ何も返さない。・・・ひと言くらい何か言って欲しいものだ。なお、ここでのテストはApacheのconfigtest同様あくまで構文のテストであって、設定値の是非を判断してくれるわけではない。テストは通って、sshdのリスタートでも落ちなかった、しかし編集時に意図せず有効にすべき値を無効にしてしまい、ログインができなくなってしまった、という事態も想定しうる。

 結局、どんな方法をとるにせよリスクを考慮し、復旧の余地がある状態で対応しなければならないことに変わりない。

