#アクセス権限を8進数に変換する awk
# USED:mod_cnv.sh "-rwsr-xr--"
#----------------------------------------------------------------------
#1桁目(SUID/GUID/S-Bit)の計算
MOD=$1

echo $MOD | awk '{x=0}{for(i=4;i<=10;i+=3){{n=substr($1,i,1)}
                                      {if(i==4&&n=="s"){x+=4}}
                                      {if(i==7&&n=="s"){x+=2}}
                                      {if(i==10&&n=="t"){x+=1}}
                      }{printf x}}'
   
#  まず変数(8進数の値) x を初期化する。
#  for文で 4,7,10桁目を処理対象とし、
#  substrで各桁(4,7,10)の1文字を取り出し、変数 n に代入する。
#  変数 n が (4桁目)=s であれば 4を
#            (7桁目)=s であれば 2を
#           (10桁目)=t であれば 1を x に加算する。
#  for文終了後に x の値を表示する。

#2-10桁目の計算
echo $MOD | awk '{for(i=2;i<=10;i+=3){
                      {x=0;n=substr($1,i,3)}
                      {if(n~/r/){x+=4}}
                      {if(n~/w/){x+=2}}
                      {if(n~/[xst]/){x+=1}}
                 {printf x}}}'
   
#  for文で 2,5,7桁目を処理対象とし、
#  変数(8進数の値) x を初期化する。
#  substrで各桁(2,5,7)の開始位置から3文字を取り出し、変数 n に代入する。
#  変数 n に r(読取)が含まれている場合 4 を
#            w(書込)が含まれている場合 2 を
#          xst(実行)が含まれている場合 1 を x に加算する。
#  for文内で x の値を表示する。これを3回繰り返す
  
#----------------------------------------------------------------------
#出力結果
#4750
### 説明 ###
# ls -l コマンドで表示される第一フィールドの値で確認。

# -rwxr-xr--
# 2-3 桁目 所有ユーザのアクセス権限 (rwx)
# 4-6 桁目 所有グループのアクセス権限 (r-x)
# 7-10桁目 その他ユーザのアクセス権限 (r--)

# -rwsr-sr-t
# SUID:       3桁目(s)  * 実行時にユーザ権限で実行
# SGID:       6桁目(s)  * 実行時にグループ権限で実行
# Sticky bit:10桁目(t)  * 全ユーザー書込権(所有者のみ削除権)

# アクセス権限(rwx)を8進数で表示すると
# r(読取権限):4 , w(書込権限):2 , x(実行権限):1 となる。
# 組み合わせると以下のようになる。
# r-x : 5 (4+1)
# rwx : 7 (4+2+1)

# rwxrwxrwx : 777 / 0777
# rwxr-xr-- : 754 / 0754

# * 8進数1桁目部分を記述
# -rwsrwxrwx: 4755 (SUID)
# -rwxrwsrwx: 2755 (SGID)
# -rwxrwxrwt: 1755 ( Sticy bit)

もちろん暗算で出来ますが、シェルスクリプト中で計算させると面倒だなとシェルスクリプトでやるしかないかな!?
と思ったらコマンドであるんですね!!それも8進数1桁目部分も計算してくれるなんて便利なコマンドがあったなんて・・・

ファイルやディレクトリのパーミッションを確認したい場合、ls コマンドではアルファベットでしか確認できませんが、stat コマンドを使う事で8進数表記でパーミッションを確認することが出来ます。

% stat -c %a /home/akishin
755
% stat -c %a /tmp
1777



%a	パーミッションの8進数表記	Windowsの場合，所有者だけのパーミッションを表示します。
%A	パーミッションの文字列表記	Windowsの場合，所有者だけのパーミッションを表示します。
%b	割り当てられたブロック数	Windowsの場合，常に0を表示します。
%B	各ブロックの大きさ（バイト単位）	Windowsの場合，常に0を表示します。
%d	デバイス番号の10進数表記	Windowsの場合，ドライブ番号を表示しますが，次の場合は表示が異なります。
		フルパスにしたときにドライブレターに続く「:」がないパスの場合
		デバイス番号として「-」を表示して，後続の処理を続行します。
		デバイス番号取得処理でエラーが発生した場合
		警告メッセージを標準エラー出力に出力し，デバイス番号として「?」を表示して，後続の処理を続行します。
%D	デバイス番号の16進数表記	Windowsの場合，ドライブ番号を表示しますが，次の場合は表示が異なります。
		フルパスにしたときにドライブレターに続く「:」がないパスの場合
		デバイス番号として「-」を表示して，後続の処理を続行します。
		デバイス番号取得処理でエラーが発生した場合
		警告メッセージを標準エラー出力に出力し，デバイス番号として「?」を表示して，後続の処理を続行します。
%f	rawモードの16進数表記	Windowsの場合，所有者だけのパーミッションを表示します。
%F	ファイルの種類	表示内容は，項目「表示形式」の「ファイルの種類の表示内容」を参照してください。
%g	所有者のグループID	Windowsの場合，常に0を表示します。
%G	所有者のグループ名	Windowsの場合，常に「...」を表示します。 
		UNIXの場合，所有者のグループ名を取得できないときは所有者のグループIDを表示して，後続の処理を続行します。
%h	ハードリンクの数	Windowsの場合，常に0を表示します。
%i	iノード番号	Windowsの場合，常に0を表示します。
%n	ファイル名
%N	クォーテーションで囲まれたファイル名	シンボリックリンクの場合は参照先ファイル名も表示します。
		Windowsの場合，シンボリックリンクであっても参照先ファイル名は表示しません。
		UNIXの場合，参照先ファイル名の取得に失敗したときは，警告メッセージを標準エラー出力に出力し，参照先ファイル名は表示しないで，後続の処理を続行します。
%o	ファイルシステム I/O操作での最適なブロックサイズ	Windowsの場合，常に0を表示します。
%s	合計サイズ（バイト単位）	Windowsの場合，ディレクトリの合計サイズは常に0を表示します。
		UNIXの場合，デバイスファイルの合計サイズは常に0を表示します。
%t	メジャーデバイス番号の16進数表記	Windowsの場合，常に0を表示します。
%T	マイナーデバイス番号の16進数表記	Windowsの場合，常に0を表示します。
%u	所有者のユーザーID	Windowsの場合，常に0を表示します。
%U	所有者のユーザー名	Windowsの場合，所有者のユーザー名が取得できないときは「...」を表示して，後続の処理を続行します。		UNIXの場合，所有者のユーザー名が取得できないときは所有者のユーザーIDを表示して，後続の処理を続行します。
%x	ファイルの最終アクセス日時※	Windowsの場合，ファイルの最終修正日時と同じ情報を表示します。
		ファイルの最終アクセス日時の表示に失敗した場合，警告メッセージを標準エラー出力に出力し，ファイルの最終アクセス日時の表示は「?」にして，後続の処理を続行します。
%X	ファイルの最終アクセス日時のエポック（UTCの1970年1月1日00:00:00）からの秒数

Windowsの場合，ファイルの最終修正日時と同じ情報を表示します。
 

%y
 
ファイルの最終修正日時※

ファイルの最終修正日時の表示に失敗した場合，警告メッセージを標準エラー出力に出力し，ファイルの最終修正日時の表示は「?」にして，後続の処理を続行します。
 

%Y
 
ファイルの最終修正日時のエポック（UTCの1970年1月1日00:00:00）からの秒数
 

%z
 
ファイル情報の最終変更日時※

Windowsの場合，ファイルの最終修正日時と同じ情報を表示します。

ファイル情報の最終変更日時の表示に失敗した場合，警告メッセージを標準エラー出力に出力し，ファイル情報の最終変更日時の表示は「?」にして，後続の処理を続行します。
 

%Z
 
ファイル情報の最終変更日時のエポック（UTCの1970年1月1日00:00:00）からの秒数

Windowsの場合，ファイルの最終修正日時と同じ情報を表示します。
 

%%
 
%（パーセント）記号
 

注※
「ファイルの最終アクセス日時」，「ファイルの最終修正日時」，「ファイル情報の最終変更日時」で出力する日時の出力形式は次のとおりです。

YYYY-MM-DD hh:mm:ss.nnnnnnnnn +/-hhmm

　YYYY：西暦年

　MM：月

　DD：日

　hh：時

　mm：分

　ss：秒

　nnnnnnnnn：1秒未満の日時。常に000000000と出力します。

　+/-hhmm：タイムゾーン。UTCからの時差を示します。


フラグ文字

書式指定コードの%の後ろに次のフラグ文字を指定できます。省略することもできます。






フラグ文字
 

内容
 


#
 
0以外の8進数表記に対しては前に0を付けます。

0以外の16進数表記に対しては前に0xを付けます。
 

-
 
出力文字列をフィールドの左にそろえます。
 

+
 
数値の正負を示す記号（+/-）を常に表示します。

符号なし整数として定義されているファイル情報に対しては，この指定は無視されます。
 

スペース
 
符号付き整数として定義されているファイル情報に対して，正の数字の前にスペースを表示します。

+と同時に指定した場合は，+が優先されます。
 

0
 
フィールドの左側をスペースの代わりに0で埋めます。
 


フィールド幅

書式指定コードの%またはフラグ文字の後ろに数値を指定することで，最小のフィールド幅を定義します。フィールド幅は002147483647の範囲で指定できます。省略することもできます。


精度

書式指定コードの%またはフラグ文字の後ろに，ピリオド（.）と次に示す数値を定義します。精度は，UNIXの場合は002147483647の範囲で，Windowsの場合は00512の範囲で指定できます。省略することもできます。 

ファイル情報が文字列の場合

表示する最大長を定義します。


ファイル情報が数値の場合

最小桁数を定義します。




ファイルの種類の表示内容

表示されるファイルの種類と，その意味は次のとおりです。






ファイルの種類
 

意味
 


regular file
 
通常ファイル
 

directory
 
ディレクトリ
 

symbolic link
 
シンボリックリンク【UNIX限定】
 

fifo
 
FIFO【UNIX限定】
 

socket
 
ソケット【UNIX限定】
 

block special file
 
ブロック型スペシャルファイル【UNIX限定】
 

character special file
 
キャラクタ型スペシャルファイル【UNIX限定】
 

unknown file
 
不明なファイル（上記以外のファイル）【UNIX限定】
 
