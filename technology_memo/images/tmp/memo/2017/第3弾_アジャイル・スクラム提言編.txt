第3弾！　アジャイル・スクラム提言編

eSchoolコースの目的
前回のeSchool第2弾では、スクラム・マスターとプロダクト・オーナーの２つの役割の立場で、実践
すべきことを整理し、スクラムの理解度を深めることを目的としていました。

今回のeSchool第3弾では、以下の２点を主目的とします。

・現状の業務で起きている問題に対して、スクラム手法を応用することにより問題解決できることを理解する。 
・スクラムで用いられる代表的なツールや手法を理解する。

　 なお当内容は、エンジニアに限らず、営業・企画・職能の皆さまも知識として持っておくべき内容と
なっています。お客さまのビジネスやサービスを理解して提案に活かす、自社で提供するサービスを
企画する、などのビジネス・シーンで活用できる手法を紹介します。

本コースを受講し、業務に 活かしていただければ幸いです 

###############################################################################
第1章　やってみよう！（提言編）
###############################################################################
こんなときは．．．
スクラムを導入していない現状のプロジェクトや業務で起きている問題に対しても、 スクラムフレームワークの考え方や手法を応用することができます。
「第1章 やってみよう！（提言編）」では、それらについて紹介します。

   
 そのタスク、本当に
「終わった？」 透明性、受入基準1-1. 受入基準タスク管理どれもこれも優先度”高”プロダクトバックログ
スプリントバックログ 1-2. 優先順位コミュニケー
ション それって無駄でしょ！デイリースクラム1-3. チームの情報共有改善過去は顧みない… スプリントレトロスペクティブ1-4. 振返り

┌──────────┬─────────────┬───────────────┬───────────┐
│カテゴリ            │    問題事象              │    キーワード                │    説明スライド      │
├──────────┼─────────────┼───────────────┼───────────┤
│コミュニケーション  │ そのタスク、本当に       │透明性、受入基準              │1-1. 受入基準         │
│                    │ 「終わった？」           │                              │                      │
├──────────┼─────────────┼───────────────┼───────────┤
│タスク管理          │ どれもこれも優先度”高” │ プロダクトバックログ         │ 1-2. 優先順位        │
│                    │                          │ スプリントバックログ         │                      │
├──────────┼─────────────┼───────────────┼───────────┤
│コミュニケーション  │ それって無駄でしょ！     │デイリースクラム              │ 1-3. チームの情報共有│
├──────────┼─────────────┼───────────────┼───────────┤
│改善                │ 過去は顧みない…         │ スプリントレトロスペクティブ │ 1-4. 振返り          │
└──────────┴─────────────┴───────────────┴───────────┘


###############################################################################
1-1. 受入基準
受入基準　作業完了の定義
プロジェクト進行中、どの工程においても、以下のような会話を良く耳にしませんか。
(PM)リリース作業計画の状況は、どうなってる？ 
(担当A)タイムスケジュールの作成は、概ね完了しています。
リリース手順書については、担当Bさんより「終わった」と聞いています。 
(PM)担当Bさん、リリース手順書の作成は終わっている？
(担当B)コマンドの確認が終われば、完了です。
(PM)では、先にタイムスケジュールをレビューしようか。
(担当A)微調整があるので、後ほど印刷してお持ちします。
この例では、会話の時点でどのタスクも終わっていませんが、「完了」と伝えています。
担当Aさん、Bさんは、何を以って、「終わった」と考えているのでしょうか。
また、PMの言う「終わった？」とは、どの時点までを指して聞いているのでしょうか。

###############################################################################
受入基準　Say “It’s done.” 

Say “It’s done.”  - 人は終わったと言う。

人は終わった (完了した) と言う (言いたい) 生き物です。しかし、スクラムでは、言葉には興味ありません。
「事実（モノ）」を確認することでしか判断しません。

「受入基準（Acceptance Criteria）」を明確に定義し、成果物に対し、その基準を満たせているかで、完了しているかを計ります。
プロジェクトにおいて、全てのタスクに「完了基準」 (完了の定義) が存在し、その基準が明確であり、タスクの依頼者 (レビュア) と作業者 (レビュイ) の間で共有されていますか。

(PM)お客さんに提出てきる状態のタイムスケジュールを、作業担当者
をバイネームで記入した上で、明日17時までに作成をお願いします。
(担当A)お客さんに提出するまでに、PMのレビューが必要ですので、
12時までに作成を完了し、13時からレビューをお願いします。
(PM)タイムスケジュールの中に、サービス影響時間も記載してください。
(担当A)承知しました。

###############################################################################
受入基準
透明性（Transparency）を高める
・「完成」の定義を共有する
依頼元は多くの場合、上長や先輩など、立場が上にあります。
そのため、担当者は、依頼の端々をくみ取って、これまでの経験から、成果物を想像し、
作成するケースも多くあります。そのため、レビュー時に手戻りが発生します。
依頼元は、完了基準、完成イメージ（受入条件）を担当者と共有することを心がけましょう。
依頼元の想像したモノができていないのは、依頼元にも責任があることを認識しましょう。

・用語を統一化する
これは、ドキュメントの記述に限ったことではありません。会話の中でも、お互いに
言葉の意味が食い違っていることも、よく発生します。
スクラムでは、全員が共通の用語で会話し、プロジェクトを進めていきます。

・タスクを共有する
スクラムでは、“この作業はどんな状況か”と確認された際に、チーム全員が同じように、
現在の状況を回答できる状態にあります。
現在のプロジェクトで、同じことはとてもできないと思いますが、各個人のタスクを
一覧化するなどし、チームメンバが相互にタスクを把握している状況を作り出しましょう。

・進捗はモノで判断する
進捗確認を会話のみで済ませていせんか。商用リリース後に、やるべきことをやっておらず、問題が
発生した経験は、誰しもが経験していることだと思います。これでは誰も幸せになりません。
進捗状況の把握を、進捗報告書などの書面だけでなく、モノを確認することのみで計測し、
うそのない（本音と建て前のない）プロジェクトを目指しましょう。
###############################################################################
受入基準

スクラム以外の案件での応用「受入基準（Acceptance Criteria）」を明確にすることで、担当者間での、不必要な
やりとり、作業の抜けモレ防止につながります。
以下をチーム内で実践することで、作業完了を明確化し手戻りを抑えましょう。

・完成」の定義を共有する
依頼元は、完了基準、完成イメージ（受入条件）を担当者と共有するため、以下が有効です。
　・完了基準を、ドキュメント（証跡）として残す
　・すべきことだけでなく、すべきでないことも明確にする
　・レビュー指摘、修正方法を読み合わせする
依頼元の想像したモノができていないのは、依頼元にも責任があることを認識することが重要です。

・進捗はモノで判断する
「終わった」と聞いていたことが実際は終わっておらず、商用リリース後に、問題が発生した 経験は、誰しもが経験していることだと思います。これでは誰も幸せになりません。
進捗状況の把握を、進捗報告書などの書面だけでなく、成果物（モノ）を確認することで、
より明確な進捗管理が実施できるようになります。


一見すると、息苦しくギスギスした状態になるのでは、と感じると思います。

しかし、完了基準を明確化することで、依頼元にも責任が生じることを理解し、
作業担当者も具体的な基準を満たすべく、作業をやり遂げるようになります。

完了基準の明確化により、緊張感のあるプロジェクト運営を！ 
###############################################################################
1-2. 優先順位 
優先順位　“優先度”での課題管理
不具合一覧や課題管理表で、以下のように“優先度”を設定することはないでしょうか。

┌─┬───┬─────────────┬──────────────────────────┬──┐
│# │優先度│    アイテム              │    概要                                            │工数│
├─┼───┼─────────────┼──────────────────────────┼──┤
│1 │高    │ 開発環境の構築           │アプリケーションの開発に必要な環境構築を行う        │ 10 │
├─┼───┼─────────────┼──────────────────────────┼──┤
│2 │高    │ ログイン機能の開発       │ アプリケーションにログインする機能の開発を行う     │ 20 │
├─┼───┼─────────────┼──────────────────────────┼──┤
│3 │高    │ メニュー画面の開発       │ログイン後に表示するメニュー画面の開発を行う        │  5 │
├─┼───┼─────────────┼──────────────────────────┼──┤
│4 │高    │ パスワード変更画面の開発 │ メニュー画面のパスワード変更ボタンから遷移するパス │ 10 │
│  │      │                          │ ワード変更画面の開発を行う                         │    │
├─┼───┼─────────────┼──────────────────────────┼──┤
│5 │高    │ ログアウト機能の開発     │ アプリケーションからログアウトする機能の開発を行う │  5 │
└─┴───┴─────────────┴──────────────────────────┴──┘
“優先度“を”高・中・低”のように設定したため、
ほとんどの項目が“高”となる！！
本当に優先度の高かったものが分からない・・・

###############################################################################
優先順位　スクラムでの考え方
スクラムにおけるタスクの優先順位の考え方を紹介します。
スクラムでは、製品やサービスの要件を“プロダクトバックログ”と呼ばれるリストで
管理し、優先順位の高いものから順番に並べることになっています。

(例）アプリ開発プロジェクトのプロダクトバックログ
┌─┬─────────────┬──────────────────────────┬──┐
│# │    アイテム              │    概要                                            │工数│
├─┼─────────────┼──────────────────────────┼──┤
│1 │ 開発環境の構築           │アプリケーションの開発に必要な環境構築を行う        │ 10 │
├─┼─────────────┼──────────────────────────┼──┤
│2 │ ログイン機能の開発       │ アプリケーションにログインする機能の開発を行う     │ 20 │
├─┼─────────────┼──────────────────────────┼──┤
│3 │ メニュー画面の開発       │ログイン後に表示するメニュー画面の開発を行う        │  5 │
├─┼─────────────┼──────────────────────────┼──┤
│4 │ パスワード変更画面の開発 │ メニュー画面のパスワード変更ボタンから遷移するパス │ 10 │
│  │                          │ ワード変更画面の開発を行う                         │    │
├─┼─────────────┼──────────────────────────┼──┤
│5 │ ログアウト機能の開発     │ アプリケーションからログアウトする機能の開発を行う │  5 │
└─┴─────────────┴──────────────────────────┴──┘
上位の項目のほうが 優先度が高い

###############################################################################
優先順位　スプリントへのタスクの割り当て
“プロダクトバックログ”のタスクは、“スプリント”と呼ばれる開発期間の中で上位の項目
から順に実施することとなり、“スプリントバックログ”に転記されます。
プロダクトバックログ
┌─┬─────────────┬──────────────────────────┬──┐
│# │    アイテム              │    概要                                            │工数│
├─┼─────────────┼──────────────────────────┼──┤
│1 │ 開発環境の構築           │アプリケーションの開発に必要な環境構築を行う        │ 10 │>スプリント①の 
├─┼─────────────┼──────────────────────────┼──┤ スプリントバックログへ
│2 │ ログイン機能の開発       │ アプリケーションにログインする機能の開発を行う     │ 20 │>スプリント①の 
├─┼─────────────┼──────────────────────────┼──┤ スプリントバックログへ
│3 │ メニュー画面の開発       │ログイン後に表示するメニュー画面の開発を行う        │  5 │>スプリント②の 
├─┼─────────────┼──────────────────────────┼──┤ スプリントバックログへ
│4 │ パスワード変更画面の開発 │ メニュー画面のパスワード変更ボタンから遷移するパス │ 10 │>スプリント②の 
│  │                          │ ワード変更画面の開発を行う                         │    │ スプリントバックログへ
├─┼─────────────┼──────────────────────────┼──┤
│5 │ ログアウト機能の開発     │ アプリケーションからログアウトする機能の開発を行う │  5 │>スプリント②の 
└─┴─────────────┴──────────────────────────┴──┘ スプリントバックログへ
スプリントバックログを 見れば、いつどの機能が
完成するのか分かる 

###############################################################################
優先順位　スプリントでのタスクの実施
優先順位の高い機能が先に完成します。
また、いつどの機能が完成するのかが一目で分かります。 

実施するタスク （スプリントバックログ①）
ス↓┌─┬─────────────┬──────────────────────────┬──┐
プ↓│# │    アイテム              │    概要                                            │工数│
リ↓├─┼─────────────┼──────────────────────────┼──┤
ン↓│1 │ 開発環境の構築           │アプリケーションの開発に必要な環境構築を行う        │ 10 │
ト↓├─┼─────────────┼──────────────────────────┼──┤
①↓│2 │ ログイン機能の開発       │ アプリケーションにログインする機能の開発を行う     │ 20 │
  ↓└─┴─────────────┴──────────────────────────┴──┘
優先度の最も高かった#1,#2は、スプリント①完了時に完成する
---------------------------------------------------------------------------------------------------
実施するタスク （スプリントバックログ②）
ス↓┌─┬─────────────┬──────────────────────────┬──┐
プ↓│# │    アイテム              │    概要                                            │工数│
リ↓├─┼─────────────┼──────────────────────────┼──┤
ン↓│3 │ メニュー画面の開発       │ログイン後に表示するメニュー画面の開発を行う        │  5 │
ト↓├─┼─────────────┼──────────────────────────┼──┤
②↓│4 │ パスワード変更画面の開発 │ メニュー画面のパスワード変更ボタンから遷移するパス │ 10 │
  ↓│  │                          │ ワード変更画面の開発を行う                         │    │
  ↓├─┼─────────────┼──────────────────────────┼──┤
  ↓│5 │ ログアウト機能の開発     │ アプリケーションからログアウトする機能の開発を行う │  5 │
  ↓└─┴─────────────┴──────────────────────────┴──┘
次に優先度の高かった #3,#4,#5は、 スプリント②完了時に 完成する
---------------------------------------------------------------------------------------------------

###############################################################################
優先順位　“優先順位”を案件で応用する 
スクラムにおける“優先順位”の考え方を応用し、“優先度”ではなく、“優先順位”を設定する
ことで本当に優先度が高かったタスクが明確になります。

┌─┬────┬─────────────┬──────────────────────────┬──┐
│# │優先順位│    アイテム              │    概要                                            │工数│
├─┼────┼─────────────┼──────────────────────────┼──┤
│1 │1       │ 開発環境の構築           │アプリケーションの開発に必要な環境構築を行う        │ 10 │
├─┼────┼─────────────┼──────────────────────────┼──┤
│2 │2       │ ログイン機能の開発       │ アプリケーションにログインする機能の開発を行う     │ 20 │
├─┼────┼─────────────┼──────────────────────────┼──┤
│3 │4       │ メニュー画面の開発       │ログイン後に表示するメニュー画面の開発を行う        │  5 │
├─┼────┼─────────────┼──────────────────────────┼──┤
│4 │5       │ パスワード変更画面の開発 │ メニュー画面のパスワード変更ボタンから遷移するパス │ 10 │
│  │        │                          │ ワード変更画面の開発を行う                         │    │
├─┼────┼─────────────┼──────────────────────────┼──┤
│5 │3       │ ログアウト機能の開発     │ アプリケーションからログアウトする機能の開発を行う │  5 │
└─┴────┴─────────────┴──────────────────────────┴──┘
“優先順位“とすることで、本当に
優先度の高かった項目が明確に！ 
###############################################################################
1-3. チームの情報共有
チームの情報共有　無駄な作業？

プロジェクト内の情報連携が足りず、無駄な作業や不必要な手戻りが発生したことはありませんか？

構築時の無駄な作業
例）検証環境の構築中、手作業でのデータ作成に
　　時間がかかり遅延が発生した。
　　他チームの有識者に相談すれば簡単に解決する
　　問題だった。
構築期間中
(構築担当)検証環境のデータ作成に時間がかかり、工程2日遅延です。
(試験担当)相談してくれれば、便利ツール「投入くん」を渡したのに。 


試験実施の手戻り
例）結合テスト期間中、試験とバグ改修を並行して
　　実施していたが、コミュニケーションロスにより、
　　効率的に試験を進めることができなかった。
結合テスト期間中
(開発担当)先週、ファイル出力処理にバグが見つかり、改修中です。
(試験担当)えー、早く教えてよ！ファイル処理の試験、先に消化しちゃったよ。

実践しているプロジェクトも多いと思いますが、これらの解決策として朝会あるいは夕会
といった日次ミーティングが有効です。次スライドでスクラムでの手法を紹介します。
###############################################################################
チームの情報共有　− デイリースクラム − 

・全員参加
・毎日決まった時間と場所で実施
・15分以内
・3つの質問（昨日、今日、課題）
・その日にやり遂げるべき事項を協議
・議論が必要なときは別の場で

スクラムでは、チームの全員が参加してデイリースクラムと呼ばれるミーティングを必ず実施します。
毎日、決まった時間に同じ場所で集まり、メンバーはスクラムマスターの3つの質問に答えていきます。
・チームがスプリントを終了するために、昨日なにをしたのか？
・チームがスプリントを終了するために、今日なにをするのか？
・チームの妨げになっていることは何か？

 デイリースクラムの目的：チームの全員が進捗を把握し、自律的に課題を解決する
全タスクを予定通り終了できるのか？妨げになっている課題があれば何か手助けできないか？を全員で考え、共有します。
ミーティングは必ず15分以内で実施します。議論が必要な場合は、別の場を設けるようにします。
そのため、立って実施すのも有効です。デイリースクラムはデイリースタンドアップとも呼ばれます。

###############################################################################
チームの情報共有　デイリースクラムのポイント（1）

デイリースクラムで陥りがちなミス
デイリースクラムは、上司に報告する場ではありません。
また、個人の進捗報告に終始してしまってはなりません。
あくまで、チームのメンバーが自律的に、チームとしてスプリントを計画通りに終了させるための
進捗と課題を話し合うためのミーティングです。
往々にして、一人一人が「昨日は○○を実施しました。今日は△△を実施する予定です。」と報告し、
それで終わってしまう、というケースがありますが、それでは意味がありません。
また、全員が「特に課題はありません。」と報告しているのも良くない兆候です。
通常、課題が全くないプロジェクトなどありませんし、会議が形骸化している可能性があります。

スクラムマスターは、効果的なミーティングが行われるように支援し、チームの障害となっている要素を取り除く役割を担います。

###############################################################################
チームの情報共有　デイリースクラムのポイント（2）

チームとしてのパフォーマンスを考える
先に述べたように、デイリースクラムでは、個人ではなくチームとしてどう目的を達成できるか、を
全員が常に考えます。
例えば、自宅のリフォームを行う時に、スクラムのチームを作って仕事を進めたケースがあります。
家の前にボードを用意し、週ごとに設定したタスクを付箋に書いて貼り、毎朝、大工や電気工事士、
配管工などタスクに関わるメンバーが集まってデイリースクラムを実践したそうです。

すると、異なる職人同士がどう協力すれば速く仕事が終わるかを相談するようになったといいます。
建築作業は一般に、仕事に取り掛かるまえに別の作業の終了を待っている時間が長いため、それを
大幅に短くすることができ、結果として通常3か月の工程を6週間で終わらせることができたのだ
そうです。
###############################################################################
チームの情報共有　デイリースクラムの応用

一般的なプロジェクトへのデイリースクラムの応用
日次ミーティングは「ただ開催すればよい」というわけではありません。
そこで、デイリースクラム（デイリースタンドアップ）の考え方を応用し、取り入れて
みてはいかがでしょうか？

・全員参加 ⇒ 全員が情報共有することが重要
・毎日決まった時間と場所で実施 ⇒ 一日のリズムを作る（必ずしも朝でなくてもよい）
・15分以内で実施 ⇒ ダラダラせず端的に
・3つの質問（昨日、今日、課題） ⇒ 課題解決しプロジェクトを推進させる
・その日にやり遂げるべき事項を協議 ⇒ 論点を明確にする
・議論が必要なときは別の場で ⇒ 時間の無駄を排除する

日次ミーティングは
チームが目的達成のために自律的に行う作戦会議
###############################################################################
1-4. 振返り
振返り　振返りの問題点

現状のプロジェクトにおいて、各工程の終了時や案件終了時に振返りを実施していると思いますが、せっかく実施したのに、のちに以下のような問題が発生していませんか？

・振返り内容が展開できていない
　　例）一部のメンバーのみで振返りを実施し、他メンバーへの内容展開を忘れた。

・次期へ継続した振返り項目（良い営み）を継続しなかった
　　例）振返り資料を再確認していない。
　　　　振返り時に“問題” 以外の内容が印象に残らなかった。

・次期へ持越した振返り項目（問題）の対応を行わなかった
　　例）振返り資料を再確認していない。
　　　　振返りした日から対応日までの期間が長すぎて、期限や内容を忘れた。

###############################################################################
振返り　スプリントレトロスペクティブ

スクラムでの振返りでは、スプリントゴールの達成具合や、スプリントで発生した問題とその改善について話し合います。

スクラムチームが自己のチームやプロセスを改善したり、文化を育てるという以下の目的を持っています。
・人、関係、プロセス、ツールなどの観点で今回のスプリントを検査する。
・うまくいったこと、今後の改善点を特定・整理する。
・今後のアクションプラン（改善実施計画）を作成する。

スプリントレトロスペクティブは、短い期間（スプリント期間）で問題や課題を発見し改善を行いプロセスやチームの文化を成長させていく活動のため、スプリントを実施するたびに強い結束力を持ったチームが育っていきます。
###############################################################################
振返り　スクラム以外の案件での応用

一般的なプロジェクトでも、スプリントレトロスペクティブの発想を応用することで、自ら改善を重ねていくプロジェクトチームが形成されると考えます。
以下をチーム内で実践することで、自律的なプロジェクトチームを目指しましょう。

・振返りをチームで実施する
個々人が自分の内面に持っていた「良かったこと」「悪かったこと」を、メンバーと共有して、一緒に「次に試すこと」を考えるというのは、チーム作りに役に立ちます。
一緒にチームを改善するためのアイデアを考えることを続けていくことで、メンバー同士が一つの
チームになっていく感覚を持つことができます。
また、新しく入ったメンバーがいたとしたら、そのメンバーにチームカルチャーを伝える効果的な方法にもなります。

・振返りは2～4週間単位くらいで実施する
初めての振返りでは、前回のTryもなく、これまでの歴史もありますので、長くなると思いますが、徐々に振返りの仕方自体もうまくなっていきますので、2～4週間単位が定着すると、さらに短い期間でもできるようになります。
短い期間での振返りができれば、改善速度の向上やより一層チーム強化が促進されます。

振返りを長く続けていくことで、チームには自分たちで現場を改善していくのだという意識が芽生えます。

自ら振返りを行い、継続的改善を行うチームに！ 

###############################################################################
第2章　ツール/手法の紹介
スクラムにおけるツール/手法
「第2章 ツール/手法の紹介」では、スクラムプラクティスにおいて用いられるツールや手法を紹介します。

┌───────────┬────────────┐
│    カテゴリ          │    キーワード          │
├───────────┼────────────┤
│ 見積もり手法         │相対サイズ              │
├───────────┼────────────┤
│ 見積もり手法         │ プランニングポーカー   │
├───────────┼────────────┤
│ プロセス可視化ツール │ タスクボード           │
│                      │ かんばん               │
├───────────┼────────────┤
│ 進捗可視化ツール     │ バーンダウンチャート   │
│                      │ バーンアップチャート   │
├───────────┼────────────┤
│ 振返り手法           │ KPT                    │
└───────────┴────────────┘

###############################################################################
見積もり手法（絶対サイズではなく相対サイズを使う）

是非近くの席の方と一緒にやってみてください。
（あとで結果を周りの人と話し合うでもいいです。人数を多いほど分かりやすいので。）
下の写真を見てください。今あなたはビルの窓から外を見ています。
これを踏まえて、次の２つの質問に答えてください。

Q1. ビル①の高さは何ｍでしょうか？
Q2. ビル①の高さは、ビル②の何倍でしょうか？


###############################################################################
見積もり手法（絶対サイズではなく相対サイズを使う）
Q1.はあるビルの“高さ”という絶対量を求める質問、
Q2.はあるビルの高さは他のビルの高さの“何倍か”という相対量を求める質問でした。

結果はどうだったでしょうか？
Q1.で答えた値と、Q2.で答えた値では、Q2.で答えた値の方が
あなたと、あなたの周りの人の答えの差が小さくありませんでしたか？

このように、一般的には絶対量の見積もりよりも、相対量の見積もりの方が確度が高いのです。
（確度が高いというよりは、多人数における回答の振れ幅が少ない分、正確であると言える。）
そのため、スクラムでは、絶対サイズではなく相対サイズを使うことが望ましいのです。

###############################################################################
見積もり手法（プランニングポーカー）
スラクムにおける見積もりは全員で行う。
そのために以下の手法がよく用いられる。

手法　：　プランニングポーカー
　　　　　基準となるアイテムを決め、見積もる対象のアイテムが、基準アイテムの何倍にあたるか
　　　　　その数値のカードをテーブルに出す。
　　　　　最小値のカードと、最大値のカードを出した人の意見を聞き、
　　　　　摺合せを行い、再度カードを出し、基本的には全員のカードの数値が揃うまで続ける。

###############################################################################
プロセスの可視化（タスクボード、かんばん） 

プロセス可視化ツールは、「タスクボード、かんばん」があります。
各タスクをステータス毎に分類し、現在のタスク状況を可視化します。
各ステータス毎の「次のステータスに移る定義（Done定義）」が必要です。

縦軸は「優先順位（≠優先度）」、横軸は「ステータス」を設定すると、管理者が
居なくても、どのタスクから実行すれば良いかがわかります。

シンプルなステータス管理の場合は以下３つになります。
「ToDo（未着手）」「Doing（実施中）」「Done（完了）」 

###############################################################################
進捗の可視化（バーンダウンチャート）

進捗可視化ツールは、「バーンダウンチャート」
期日までに完了するか予測が立てやすい特性があります。
そのため、どのタイミングで進捗が鈍化したかなどがわかります。

縦軸に「残時間（残工数）」、横軸に「期間」を入れます。
実績線が理想線より「上」になれば遅延。
実績線が理想線より「下」になれば前倒し。

###############################################################################
進捗の可視化（バーンアップチャート）

もう一つ「バーンアップチャート」があります。

バーンダウンと近い特性を持っていますが、
作業タスク増加により、進捗が鈍化した場合に、
より分かりやすくなっています。

縦軸に「必要時間（工数）」、横軸に「期間」を入れます。
実績線が理想線より「上」になれば前倒し。
実績線が理想線より「下」になれば遅延。

###############################################################################
振返り手法（KPT（けぷと、けーぴーてぃー））

振返りに向いたツール（フレームワーク）です。
　Keep（良いこと、続けたいこと）
　Problem（問題点、不満点）
　Try（改善策、工夫したいこと）の観点で整理します。

整理の順番として下記図の順に整理すると良いでしょう。

###############################################################################
振返り手法（KPT（けぷと、けーぴーてぃー）） 

１．試してみてうまくいったこと/続けたいこと
　　 前回の振返りの際に洗い出したTry項目について、アクションの実績を確認し、
　　 今回のKeepとしたい項目を抽出します。

２．良いこと、続けたいこと
     今回のKeepについての項目を付箋等に書き出し明示します。スクラムマスターは、
     書き出された項目をひとつひとつ紹介し、全員で確認します。詳細な説明が必要な場合には、
     記載者に説明を求めます。
 　　 ⇒良いことの確認の他に、活躍をアピールすることができるのでモチベーションの維持に
        つながります。

３．問題点、不満点
     今回のProblemについての項目をKeepと同様に付箋等に書き出し明示します。
     スクラムマスターは、書き出された項目をひとつひとつ紹介し、グルーピングします。
　　 ⇒グルーピングすることによりプロジェクトで発生している問題の大小を可視化することが
       可能となります。

４．効果がありそうな改善策 / ５．強化する改善策 / ６．工夫したいこと
　　明示されたKeep/Problem項目に対して、改善策、工夫したいことを付箋等に書き出し明示します。
　　 スクラムマスターは、書き出された項目をひとつひとつ紹介し、グルーピングします。
     ⇒グルーピングすることにより次回Try項目の必要度合いを可視化することが可能となります。

７．取り組むことの選択
　　明示された次回Try項目に対して、プロジェクトで定義した決定ルール※を用い選択します。
　　 ※多数決やジャンケン、等

###############################################################################
アジャイル・スクラムWG
eSchool第1弾～第3弾
まとめ

eSchoolのまとめ

当eSchoolを通して、スクラムの３本柱（透明性、検査、適応）や、アクター（プロダクトオーナー、スクラムマスター、チーム）の役割を理解して頂けたと思います。
スクラムはあくまでフレームワークであり、細かな仕事の進め方について定義していないため、スクラムを実践したからと言ってPJが成功するものではありません。ユーザに価値のあるものを提供するために、具体的にどのように仕事を進めるかは、チームの自律的な判断と行動に任されています。
当eSchoolにより、スクラムに興味を持たれた方は、現状のPJ推進の１つの引き出しと
して実践してみてください。今まで見逃していたこと、見過ごしていたこと等、様々なことが透明となり、健全なPJ運営に役立つものであるということを肌で感じることができるはずです。
