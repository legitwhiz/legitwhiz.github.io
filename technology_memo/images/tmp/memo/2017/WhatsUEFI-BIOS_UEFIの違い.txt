What's UEFI BIOS / UEFI の違い

マザーボードへのUEFI採用が本格化している。しかしUEFIが導入されることによって何
が変わり、どんなメリットがあるのだろうか。ここではUEFIの解説とともに、BIOSでは
使用制限のあった3TB HDDの取り扱いについて説明する。

●BIOSの常識を覆すUEFIの革新性
UEFI（Unified Extensible Firmware Interface）とは、当初IntelがBIOS（Basic Input
/Output System）を「EFI」に置き換える目的で考案したファームウェアの仕様で、現在
は「UEFI」に名を変え、UEFIフォーラムによって仕様策定が進められている。BIOSから
UEFIに移行することで、設計の自由度が増し、大幅に機能を強化できるようになる。
現状での自作ユーザーにとってのUEFI化の大きなメリットは二つ。その一つが起動ドラ
イブの容量制限が実質的になくなることだ。BIOSは約2.2TB以上のディスクパーティショ
ンを管理可能なGPT（GUIDPartition Table）領域からのOS起動に対応しておらず、これ
にはUEFIに対応したマザーボードが必要となる。マザーメーカーがしきりに3TB HDDへの
対応をアピールするのはこの理由による。
もう一つのメリットは、グラフィカルな画面デザインやマウス操作を導入できること。
UEFIだからといって設定できる内容に大きな違いはないものの、テキストベースのBIOS
に苦手意識を持つユーザーも少なからずおり、GUI化によってある程度直感的な操作が可
能になる。UEFIの登場により、今後自作PCの使い心地は大きく変化していくだろう。

●OSとハードウェアの橋渡しをするBIOS
BIOSがUEFI化すると

①起動ドライブの容量制限が実質なくなる。
②GUI化が容易に
※UEFI=GUIライクなBIOSではない。

●2TB以上の起動ディスクを作るにはUEFIが必須
旧(古くからのパーティション管理方法)
 MBR(Master Boot Record)
     ・32bit管理
     ・512Bセクターx2^32≒2.2TB(3TB HDDだとパーティションが分割される)

新(新しいパーティション管理方法)
 GPT(GUIDPartition Table)
     ・64bit管理
     ・512Bセクターx2^64≒8.5ZB

●3TBパーティションを扱うには実質UEFIと64bit OSが必須

　上で示しているように、3TBのHDDを使うときに問題になるのが、MBRでは2.2TB以上の
パーティションを作れないという点だ。データドライブとして3TBのHDDを使うなら、起
動ドライブがMBRでも問題なく、WindowsからデータドライブをGPTに変換して1パーティ
ションにまとめることができる。
 　しかし、起動ドライブとして使う場合は、OSインストール時にGPTでパーティション
を作る必要があり、これにはGPT領域を起動ドライブとして扱えるUEFIに対応したマザー
ボードを用いなければならない。また、それに加えてGPTをサポートするOSも必要だ。

表.BIOS、UEFIのブート方式に違い(RHEL)
┌─────┬────────────────┬──────────────────┬──────┬───────┐
│ブート方式│ 動作                           │ブートローダの制限                  │CPU         │パーティション│
├─────┼────────────────┼──────────────────┼──────┼───────┤
│BIOS      │ステージ１：MBR内にステージ1の  │BIOSが読み込むブートローダは512Bytes│BIOSは16bit │ MBR形式      │
│          │ローダが存在し、ステージ2を読み │という制限があるため、2段階の分割す │であるため  │              │
│          │込む。ステージ1のローダは、     │ることにより512Bytesより大きなブート│低速。      │              │
│          │                                │ローダを実行する。                  │            │              │
│          │/boot/grub/stage1               │                                    │            │              │
│          │ステージ２：ステージ2のローダは │                                    │            │              │
│          │Grubメニューとコマンドを処理し  │ステージ2は2.2TBまでにブートローダ  │            │              │
│          │、ブートするカーネルとファイル  │が存在する必要あり。BIOSが認識可能  │            │              │
│          │ を確定する。                   │なのは2.2TBまでであるため           │            │              │
│          │ステージ2のローダは             │                                    │            │              │
│          │/boot/grub/stage2               │以上の理由によりステージ2のブートロ │            │              │
│          │/boot にカーネルが存在 する。   │ーダはbootパーティション上に配置す  │            │              │
│          │                                │る。そしてbootパーティションはデバイ│            │              │
│          │                                │スの先頭に置くことが推奨されている。│            │              │
├─────┼────────────────┼──────────────────┼──────┼───────┤
│UEFI      │・/boot/efi 以下にローダが存在  │ ブートローダの場所は実質制限無し。 │UEFIは32bit │ GPT形式      │
│          │・カーネルを読み込む。/boot     │                                    │あるいは64  │(BIOSはGPTに  │
│          │  にカーネルが存在。            │                                    │bitで動作す │アクセスが不  │
│          │                                │                                    │るため、BIOS│可能)         │
│          │                                │                                    │と比較して  │              │
│          │                                │                                    │高速で動作  │              │
│          │                                │                                    │する。      │              │
└─────┴────────────────┴──────────────────┴──────┴───────┘

表.BIOS、UEFIのサポートの違い(RHEL)
┌────────────────────┬────────────┬─────────┐
│形式                                    │ MBR形式                │GPT形式           │
├────────────────────┼────────────┼─────────┤
│サポートするファームウェア              │BIOS,UEFI               │UEFI              │
├────────────────────┼────────────┼─────────┤
│基本パーティション                      │最大4                   │最大128           │
├────────────────────┼────────────┼─────────┤
│拡張パーティション                      │１                      │無し              │
├────────────────────┼────────────┼─────────┤
│拡張パーティション内の論理パーティション│制限無し                │無し              │
├────────────────────┼────────────┼─────────┤
│ツール                                  │fdisk、parted           │parted,gdisk      │
├────────────────────┼────────────┼─────────┤
│ブートローダの制限                      │ ハードディスクの2.2TB内│8ZB（ゼタバイト） │
│                                        │                        │実質は制限無し    │
├────────────────────┼────────────┼─────────┤
│サポート状況                            │RHEL 5 x86              │RHEL 6 x86_64     │
│                                        │RHEL 5 x86_64           │RHEL 7 x86_64     │
│                                        │RHEL 6 x86              │Vista以降         │
│                                        │RHEL 6 x86_64           │Windows2008x64    │
│                                        │Vista以前               │Windows2012       │
│                                        │Windows2003,2008x86     │ESXi5.x、6.x      │
│                                        │Solaris11.2 i386        │Solaris11.2x86_64 │
└────────────────────┴────────────┴─────────┘

●GPT の特徴は主に次の点だと認識した。
・扱えるディスクの容量は、MBR が 2TB であるのに対して GPT は 8ZB と大きく拡張される。
・GPT では標準で 128 個のパーティションエントリがあり、基本パーティション・論理パーティションといった考え方は不要にな
  る。シンプルだ。
・GPT にはディスクおよび各パーティションごとにGUIDが定義されており、ファイルシステムやLVM PVを作成しなくても、生の
  ディスクとパーティションを明確に識別できる。
・72バイトのパーティション名が定義できる。
・パーティションのタイプ(用途)も128ビットのGUIDで管理される。
・GPT ではパーティションの情報をディスク先頭と末端の2カ所に保持する冗長構成となっている。
・GPT でも先頭セクタ(LBA 0)は MBR として読めるものを書き込んでおり、GPT を理解しないプログラムによる破壊の危険を避け
  ている。
・ディスクの第一パーティションをFAT32でフォーマットし，これをシステムパーティションと呼びます。このシステムパーティ
  ションにUEFIのSDKで記述したアプリケーション，ブートローダーを配置します。

●GPTの動作を確認してみる
GPTの検証環境は CentOS 7.0 とし、コマンドは gdisk を使用する。理由は以下のとおり。
・GPTでフォーマットするには gdisk コマンドか parted コマンドを使用する。
  parted は汎用向けなので、GPTに特化した gdisk が使用しやすい(GUIDの書き換えも gdisk でなければならない)。
    ・parted は fdisk/gdisk と異なりオペレーションが即座に反映されるため個人的に慣れない。
    ・RHEL7 では gdisk が OS 標準のRPMとして含まれている。
    ・RHEL6 では gdisk は OS 標準のRPMには含まれていないため、EPELのリポジトリから追加インストールする必要がある。
・標準で udev が GPT をサポートするのは RHEL7 から(のように見える)。
    RHEL7 では GPT の パーティションGUID やパーティション名に基づき、/dev/disk/by-partuuid 下と /dev/disk/by-partlabel
    下に自動的に永続的なデバイスファイル(シンボリックリンク)を作成してくれる。
・RHEL6 ではそうではないため、自分でルールを書いてなんとかする必要がある。

【参考】
GPT(GUID Partition Table) に関するメモ
http://d.hatena.ne.jp/incarose86/20150131/1422723062


■Windows Server2012
Windowsのプライマリパーティション(Cドライブ)に加え、既定でWindows 回復環境 (Win
dows RE) ツール パーティションおよびEFIシステムパーティション(ESP)およびMicroso
ft予約パーティション(MSR)が作成されます。

●uEFIモード
┌────────────────┬────┬───┬───────┐
│パーティション種別              │サイズ  │形式  │ドライブレター│
├────────────────┼────┼───┼───────┤
│Windows 回復環境 (Windows RE)   │300MB～ │NTFS  │なし          │
│ツール パーティション           │        │      │              │
├────────────────┼────┼───┼───────┤
│EFIシステムパーティション(ESP)  │100MB   │FAT32 │なし          │
├────────────────┼────┼───┼───────┤
│Microsoft予約パーティション(MSR)│128MB   │無し  │なし          │
├────────────────┼────┼───┼───────┤
│Windowsプライマリパーティション │NTFS    │無し  │C             │
└────────────────┴────┴───┴───────┘

Windows REツール パーティション、はバックアップ ユーティリティでパーティション
をキャプチャするための領域です。ESPには、Windowsブートマネージャー等のOS起動に
必要な情報が保存されます。 MSRには、他のシステムパーティションに関する情報が格
納され、この情報はMicrosoftアプリケーションで使用されます。

さらに、Windows Server 2012を導入すると、「Windows Boot Manager」というエントリ
ーがuEFIのブートオーダーに設定されます。この設定は、ESPに配置されているWindows
ブートマネージャーから起動するための設定です。Windowsブートマネージャーは、以下
のパスに配置されています。

EFIBootBootx64.EFI

●BIOSモード (Windows Server2012)
┌────────────────┬────┬───┬───────┐
│パーティション種別              │サイズ  │形式  │ドライブレター│
├────────────────┼────┼───┼───────┤
│Microsoft予約パーティション(MSR)│350MB～ │NTFS  │なし          │
├────────────────┼────┼───┼───────┤
│Windowsプライマリパーティション │NTFS    │無し  │C             │
└────────────────┴────┴───┴───────┘
上記のとおり、uEFIモードでWindows Server 2012を導入すると、これまでのBIOSシステ
ムに導入した場合と比較して変更点が存在します。このような変更点は、バックアップ
運用等のシステム運用に影響する場合があります。これまでのBIOSシステムと同様の運
用方法が必要になる場合は、BIOSモードによる導入をご検討ください。


■vSphere ESXi
仮想マシンのファームウェアについてもBIOSモードとEFIモードと選択が可能。


■UEFI対応BIOSで追加された新機能「EFI Shell」とは？
UEFI シェルは、uefi ブートローダを含む、uefi アプリケーションを起動するためのフ
ァームウェア用のシェル/ターミナルです。
それとは別に、シェルは、システムやファームウェアのメモリーマップ (memmap) など
の様々な情報を取得したり、ブートマネージャ変数を変更したり (bcfg)、パーティショ
ンプログラムを実行したり (diskpart)、uefi ドライバをロードしたり、テキストファ
イルを編集したり (edit) するのにも使われます。 

重要な UEFI シェルコマンド
bcfg
BCFG コマンドは UEFI NVRAM エントリを修正して、ブートエントリやドライバオプショ
ンを変更できるようにするために使われます。

edit
EDIT コマンドは nano テキストエディタに似たベーシックなテキストエディタを提供し
ます、ただし機能は少なくなっています。EDIT コマンドのテキストエディタは UTF-8
エンコードや LF と CRLF の改行コードを扱うことができます。 
