■■■ cron の使い方
まず、基本中の基本として、cron の設定ファイルは、/etc/crontab に記述されている。さらには、/etc/cron.daily/、/etc/cron.weekly/、/etc/cron.monthly/ 以下に格納された設定ファイルを1日1回、週に1回、月に1回と実行してくれるのはすでに周知のことだろう。

■/etc/crontabにはRHELでは、default下記のように設定されている。
#------------------------------------------------------------------------------
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/

# For details see man 4 crontabs

# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed
01 * * * * root run-parts /etc/cron.hourly
0  0 * * * root run-parts /etc/cron.daily
22 4 * * 0 root run-parts /etc/cron.weekly
42 4 1 * * root run-parts /etc/cron.monthly
#------------------------------------------------------------------------------

cron.hourlyは、毎時1分に実行。
cron.dailyは、毎日0:00に実行。
cron.weeklyは、毎週日曜日4:22に実行。
cron.monthlyは、毎月1日4:42に実行。
されることとなる。


■ /etc/crontab と crontab -eの違い
/etc/crontab は通常一般ユーザには書き込み出来ません。
crontab -e を実行すると、/var/spool/cron の下にユーザ名のファイルが出来ます。(rootユーザであっても)
 
/etc/crontab は直接編集するのではなく、crontab -e コマンドによって編集するのがBEST（当然？）とされています。
そのため、一般ユーザー用とsystem用としての使い分けと思われる。

ですが、編集してはいけないということではないため、大まかな指定では、/etc/cron.{hourly,daily,weekly} で指定し、
より細かく制御したい場合は、crontab -e を使ったほうが管理の面でも楽なことは確かです。
あるいは、/etc/cron.d/ 以下にスクリプトを置くという手もあります。


crontab のオプションを以下に記述します。書式に関しては、/etc/crontab と同様である。ユーザフィールド（/etc/crontab では root となっている箇所）は自分のcrontab なので省略することができる（/etc/crontab でも省略できるが）。

-e crontabを編集する。 
-l 登録されているcrontabを表示する。 
-r 登録されているcrontab を削除する 
-u ユーザ名 設定するcrontabのユーザ名を指定する 

■メール送信設定
cron は、 /etc/crontab に記述された処理を 指定したユーザ宛にその実行結果を送信します。これはとてもありがたい機能ですが、時として非常にうざったい機能にもなります。Logwatch のように 稼動しているサービス一覧のログを取得し、一通のメールにまとめて送信してくれるならまだしも、ひとつひとつのシェルスクリプトに対して個別にメールを送られたのではたまったものじゃありません。なので、メールを送信してもいいジョブと、送信する必要のないジョブを明確にきりわけておく必要があるでしょう。

①----
標準出力、標準エラー出力とも捨てる設定です。つまり、メールは送信しないし、ファイルにも出力しない、スクリプトを実行した記録はどこにも残らないという意味なります。

②----
標準出力を捨て、標準エラー出力をメールで送信する設定です。エラーになった処理だけを知らせてくれるので場合によっては①よりも効率が良いといえます。

③----
メール送信はしないが、/var/log/origin.log に標準出力と標準エラー出力を残すという意味になる。メールで通知を受け取るほど重要度が高くないが、一応ログには残しておきたい場合には、この方法は有効でしょう。

 05 5 * * * root /usr/local/bin/hoge.sh > /dev/null 2>&1　----------------①
 05 5 * * * root /usr/local/bin/hoge.sh 1> /dev/null 2> /dev/null　---------①
 05 5 * * * root /usr/local/bin/hoge.sh 1> /dev/null　----------------------②
 05 5 * * * root (/usr/local/bin/tames.sh > /var/log/origin.lo 2>&1) > /dev/null　--③

■書き方
5分おきに/home/hoge/fuga.shを実行するという例

*/5 * * * * /home/hoge/fuga.sh

左から、[分] [時] [日] [月] [曜日] [コマンド]
" 分は0～59の数字で指定
" 時は0～23の数字で指定
" 日は1～31の数字で指定
" 月は1～12の数字で指定
" 曜日に関しても数字で指定し、0と7が日曜日、1以降は順に、月、火、水、木、金、土となる
" コマンドは、設定ファイルでパスを通していないものに関してはフルパスで指定するかカレントディレクトリからの相対パスで指定しなければならない

### 時間の書き方例 ###
43 23 * * *               23:43に実行
12 05 * * * 　　          05:12に実行
0 17 * * *                17:00に実行
0 17 * * 1                毎週月曜の 17:00に実行
0,10 17 * * 0,2,3         毎週日,火,水曜の 17:00と 17:10に実行
0-10 17 1 * *             毎月 1日の 17:00から17:10まで 1分毎に実行
0 0 1,15 * 1              毎月 1日と 15日と 月曜日の 0:00に実行
42 4 1 * * 　          　 毎月 1日の 4:42分に実行
0 21 * * 1-6　　          月曜日から土曜まで 21:00に実行
0,10,20,30,40,50 * * * *　10分おきに実行
*/10 * * * * 　　　　　　 10分おきに実行
* 1 * * *　　　　　　　　 1:00から 1:59まで 1分おきに実行
0 1 * * *　　　　　　　　 1:00に実行
0 */1 * * *　　　　　　　 毎時 0分に 1時間おきに実行
0 * * * *　　　　　　　　 毎時 0分に 1時間おきに実行
2 8-20/3 * * *　　　　　　8:02,11:02,14:02,17:02,20:02に実行
30 5 1,15 * *　　　　　　 1日と 15日の 5:30に実行
※ちなみに全部 * だと毎分実行される。

■登録されているcronを確認表示
以下のコマンドで確認
$ crontab -l

■設定の全削除
以下のコマンドで設定全消去（要注意）
$ crontab -r

■正しく動いているかどうか確認する方法
以下のファイルに実行結果が吐出されるので、確認すればOK。
# view /var/log/cron

■動いてない時に確認する事
・crondは起動しているか？
$ service crond status
//または
$ /etc/rc.d/init.d/crond status

・実行ファイルの権限は正しいか
シェルやPerlなどのファイルを実行する場合、ファイルに実行権のパーミッションの付与を忘れないようにする。

・ファイルはフルパスで指定されているか
フルパス、または実行ファイルがあるディレクトリまでcdコマンドで移動し、相対パスでそのディレクトリを指定する。

00 * * * * cd /home/foo/public_html; ./foo.sh


■/etc/cron.dディレクトリ内のファイル書き方
「/etc/crontab」と同じ書式でかけば良いです。 

注意をする点としては・・・
1.パーミッションは644
2.所有者はrootで！

「/etc/cron.d/」ディレクトリ内の「0hourly」ファイルを確認してみると、「/etc/crontab」と同じ書式で書かれていることが分かります。 

「/etc/cron.d/0hourly」ファイル
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
01 * * * * root run-parts /etc/cron.hourly

「/etc/crontab」同様に環境変数を設定し、その後に実行コマンドの設定を行っています。
ちなみ、設定内容は毎時01分にrootユーザが「/etc/cron.hourly」ディレクトリ内のプログラムを実行するという設定です。 
「run-parts」がディレクトリ内のプログラムを実行するというコマンドになります。 

■crontabの設定を適当に書いて、動いてるからこれでいいやと思っていたりしませんか？
１週間前までの私は、そんな状態でした。 $ crontab -l
0   9 * * * /bin/bash /home/dqneo/bin/hoge.sh > /dev/null 2>&1
0  10 * * * /bin/bash /home/dqneo/bin/fuga.sh > /dev/null 2>&1
0  11 * * * /bin/bash /home/dqneo/bin/piyo.sh > /dev/null 2>&1
0  17 * * * /bin/bash /home/dqneo/bin/piyo.sh > /dev/null 2>&1
このような設定であったために、「ログが残らない」「障害が起こっても気づかない」など様々な問題を抱えていました。

●crontab -e で直接編集しない
有名な話ですが、crontab -r とやってしまうと全てが一瞬で消え去ります。
必ずローカルファイルに設定を書いたうえで、それを反映させるようにしましょう。
$ crontab -l > ~/crontab # 現在の設定をバックアップ
$ vi ~/crontab           # ローカルファイルを編集
$ crontab < ~/crontab    # ローカルファイルを反映する

●crontab設定をバージョン管理する
誰がいつ何をいじったか履歴が残るように、svnやgitなどのバージョン管理システムに登録しておきましょう。
トラブルが起こったときに、このログを見れば、直近のcrontab設定変更がどのようなものであったのかすぐに確認することができます。
恐怖のcrontab -r. 設定ファイルはレポジトリ管理せよ - Slow Dance 
http://d.hatena.ne.jp/LukeSilvia/20080621/p1

●MAILTOを必ず設定する
MAILTOを設定しないままだと、サーバ内のユーザローカルのmailboxに入ってしまいます。
 一応mailコマンドで見れますがこれだと不便なので、専用のアラート受信用メールアカウント(会社や部署のMLなど)を用意してcrontabの冒頭で設定しましょう。
MAILTO="alert@yourdomain.com"


●標準出力は捨てない (> /dev/null してはダメ)
バッチのログは非常に重要です。
command > /dev/null などしてしまうと、何かが起こったときに調査のしようがなくなります。
ログは必ずどこかに出力するようにしましょう。

 一番簡単なのは、専用ログファイルに追記してしまうことです。
command >>  /path/to/logfile
（ただしこの場合はログファイルが肥大化してディスクフルにならないように、ローテーションの仕組みを別途作っておきましょう。)

●エラーメッセージは標準エラー出力に吐く
たまに標準出力にエラーメッセージを吐いてしまっているケース(注１）を見かけますが、これではエラーと正常の区別がつかないので意味がないです。
 障害発見が遅れてしまいます。

悪い例
echo "error message"
exit 1

良い例
スクリプト内でエラーが起きたときのエラーメッセージは、必ず標準エラ—出力に吐きましょう。 echo "error message" 1>&2
または
echo "error message" > /dev/stderr
exit 1

●コマンド重複をまとめる
朝と夕の１日２回実行するような場合に、たまに２行書いてる人がいます。
悪い例
0  11 * * * /bin/bash /home/dqneo/bin/piyo.sh 
0  17 * * * /bin/bash /home/dqneo/bin/piyo.sh
あたり前ですが１行にまとめましょう。 
良い例
0  11,17 * * * /bin/bash /home/dqneo/bin/piyo.sh

●パス名の重複をまとめる
下記のようなパス名の重複も気になります。 
悪い例
0   9 * * * /bin/bash /home/dqneo/bin/hoge.sh >> /home/dqneo/logs/hoge.log
0  10 * * * /bin/bash /home/dqneo/bin/fuga.sh >> /home/dqneo/logs/fuga.log
これは環境変数を使ってまとめるとすっきりします。 
良い例
BIN_DIR="/home/dqneo/bin"
LOG_DIR="/home/dqneo/logs"

0   9 * * * /bin/bash $BIN_DIR/hoge.sh >> $LOG_DIR/hoge.log
0  10 * * * /bin/bash $BIN_DIR/fuga.sh >> $LOG_DIR/fuga.log
※ LOG_DIR="$HOME/logs" のように右辺で変数を使うことは残念ながらできませんのでご注意。

●実行時間を0分きっかりにしない
素人は「何時０分」に起動する設定を書いてしまいがちです。
しかし例えば毎時０分に起動するバッチと、１０時０分に実行するバッチが重なると、サーバに不要な負荷をかけてしまいます。 
悪い例
0   * * * * /bin/bash $BIN_DIR/hoge.sh >> $LOG_DIR/hoge.log
0  10 * * * /bin/bash $BIN_DIR/fuga.sh >> $LOG_DIR/fuga.log
気休め程度ですが、「何時０分」とはせずに、「何時５分」とか「何時１０分」とか微妙にずらしておきましょう。 
良い例
5   *  * * * /bin/bash $BIN_DIR/hoge.sh >> $LOG_DIR/hoge.log
15  10 * * * /bin/bash $BIN_DIR/fuga.sh >> $LOG_DIR/fuga.log

●コマンドの重複起動を防止する
「１時間に１回」のバッチは、「１時間に１本」しか走らないと思い込んでいませんか？
それは甘いです。

もしサーバの負荷上昇や処理量増大などが原因でバッチ処理が１時間以上かかってしまった場合、１個目のプロセスが終わらないうちに２個目のプロセスが起動してしまいます。

バッチが重複起動してしまうと、思わぬ事故を引き起こします。
 重複起動の防止処理を入れておきましょう。


cron等でシェルを複数回実行した時、多重起動するとまずいので、それを回避するスクリプト。

多重起動を防ぐシェルスクリプト業務上必要だったので作ってみた。
#------------------------------------------------
#!/bin/sh

SCRIPT_PID="/home/user/run_script.pid"
if [ -f $SCRIPT_PID ]; then
  PID=`cat $SCRIPT_PID `
  if (ps -p $PID >/dev/null); then
    exit
  fi
fi

echo $$ > $SCRIPT_PID

(この辺にバッチの処理)

rm $SCRIPT_PID
#------------------------------------------------
pidでプロセスの有無を確認しているので起動中は２重に実行されないし、
何か理由があって落ちてた場合は再実行される。
後はcrontabにこのシェルを設定してやればOK


■RHEL6におけるジョブスケジューラ “anacron”
RHEL5まではcronでの実行がメインだったOS デフォルトジョブも、
RHEL6からほとんどが anacron に切り替わっております。
ジョブをスケジュールするための主要設定ファイルは /etc/anacrontab ファイルで、root ユーザーのみがアクセスできます。

/etc/anacrontab(default)
#------------------------------------------------------------------------------
# /etc/anacrontab: configuration file for anacron
# See anacron(8) and anacrontab(5) for details.
SHELL=/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
# the maximal random delay added to the base delay of the jobs
RANDOM_DELAY=45
# the jobs will be started during the following hours only
START_HOURS_RANGE=3-22

#period in days   delay in minutes   job-identifier   command
1       5       cron.daily              nice run-parts /etc/cron.daily
7       25      cron.weekly             nice run-parts /etc/cron.weekly
@monthly 45     cron.monthly            nice run-parts /etc/cron.monthly
#------------------------------------------------------------------------------

■cronとanacronの違い
従来利用されているcronと、今回ご紹介するanacronの大きな違いの１つは
「ジョブ実行時刻の指定」にあります。

●cronは、「ジョブ実行時刻を指定可能です。」
 　逆に言うと、指定した時刻以外には絶対に起動しません。

●anacronは、「正確なジョブ実行時刻を指定できません。」
 　実行時間帯（例：3時～22時）は指定できますが、
 　実行時刻はその時間帯の中でOS側でスケジューリングします。 

◆cronとanacronの違いまとめ 
cronとanacronの違いをもう少し詳細にまとめてみます。
┌──────────────┬──────────────────┬─────────────────────┐
│                            │                cron                │            anacron                       │
├──────────────┼──────────────────┼─────────────────────┤
│スケジューリング可能時刻    │ ・ピンポイントで時刻指定可         │・時間帯で指定                            │
│                            │                                    │  例：3時～22時                           │
├──────────────┼──────────────────┼─────────────────────┤
│ジョブの実行頻度            │ ・同一ジョブを1日複数回実行可      │ ・同一ジョブは1日1回まで実行可           │
│                            │ ・実行間隔は細かく指定可           │ ・実行間隔は日数で指定                   │
│                            │  （分、時、日、月、曜日）          │ （@monthlyなどのマクロで月次指定等も可） │
├──────────────┼──────────────────┼─────────────────────┤
│プロセス常駐                │ ・常駐（デーモンプロセス）         │ ・非常駐（cronから定期的に起動）         │
├──────────────┼──────────────────┼─────────────────────┤
│利用可能なユーザ            │ ・各ユーザからも利用可             │ ・システム管理者のみ利用可               │
├──────────────┼──────────────────┼─────────────────────┤
│設定ファイル                │ ・システム用 (/etc/crontab)        │ ・システム用のみ(/etc/anacrontab         │
│                            │ ・サービス用 (/etc/cron.d/*)       │                                          │
│                            │ ・各ユーザ用 (/var/spool/cron/*)   │                                          │
└──────────────┴──────────────────┴─────────────────────┘

なぜanacronのような曖昧なスケジューリングの仕組みが必要なのでしょうか。
共有ハードウェア上に、複数仮想OSを動かすのがスタンダードな今、
 各OSが一斉にジョブ動作すると、その時刻にリソース負荷が集中してしまいます。
だからといって、OS毎にジョブ時刻を変える設計もサーバ数増加時は管理が大変です。
ランダムにはなりますが、各OSが「今日中のどこかでジョブをやっておくね！」というのも、
ジョブ種別によっては役に立ちます。

◆どのように使い分けるべきか 
ジョブ実行タイミングの自動分散を必要としない場合、
 　従来どおり cron を使って問題ないと考えます。

ジョブ実行タイミングの自動分散を必要とする場合についても、
 　柔軟に細かいスケジュール条件が指定可能な cron に対し、
 　anacron は不向きとなる条件は数多くありますのでご注意ください。

anacronに不向きなジョブ
●1日に複数回起動が必要
●正確な時刻指定が必要
●ジョブ間で実行順序に前後関係がある
●システム管理ユーザ以外がスケジュール登録利用する

■RHEL5と6の違い 
RHEL5まではcron.{daily|weekly|monthly} 以下の実行スクリプトは、crontabにて指定された時間に実行されていたが、RHEL6からは全てanacron配下に置かれている。
そのほか、RHEL5でanacronは個別のサービスとして登録されていたが、RHEL6ではcronによって制御されている。
この設定によってRHEL6で何が起きるかと言うと、cron.{daily|weekly|monthly} 以下におかれたスクリプトが「何時に実行されるかわからなくなる」。
 特にログローテーションなんかは、RHEL5では毎日04:02に起動されていたが、RHEL6ではその時間に起動されない。
んじゃ、いつ実行されるのって事で、詳しくanacronの動きを調べてみることにする。

●そもそもanacronとは
crondをサポートするような機能。
crondは起動すると一分おきにcrontabを見に行って、起動条件に合致するものがあればそれを実行する。しかし、crondが起動していない時間は無視されてしまう。
 例えば、毎日 23:00 にあるバッチを起動しているとする。何かの理由で 22：55～23：05の間、サーバをメンテナンス等で止めたとする。
この場合、当然ながらバッチは起動されない。これはこれで正しい動作なのだが、それでは困る場合にanacronへ設定を入れておくことでシステム起動後にバッチを遅延起動させる事ができる。
なので、上の設定を見るとRHEL5まではcronで実行されなかった場合、anacronで実行させるという設定になっていることが分かる。
#------------------------------------------------------------------------------
RHEL5/crontab
  02 4 * * * root run-parts /etc/cron.daily

  RHEL5/anacrontab
  1       65      cron.daily              run-parts /etc/cron.daily
#------------------------------------------------------------------------------
設定の意味：
1カラム目：何日おきに実行するか？
2カラム目：1カラム目で指定された期間実行されていなかった事を検知した場合、次に処理を実行する場合の遅延時間
3カラム目：識別子 /var/spool/anacron 以下のこの名前のファイルが作成される。anacronは処理を実行するとこのファイルに実行された日付を書き込む
4カラム目：実行する処理

 RHEL6のanacrontab 
 RHEL6のanacrontabは以下のようになっているので、
#------------------------------------------------------------------------------
# the maximal random delay added to the base delay of the jobs
  RANDOM_DELAY=45
  # the jobs will be started during the following hours only
  START_HOURS_RANGE=3-22

  1       5       cron.daily              nice run-parts /etc/cron.daily
  7       25      cron.weekly             nice run-parts /etc/cron.weekly
  @monthly 45     cron.monthly            nice run-parts /etc/cron.monthly
#------------------------------------------------------------------------------

cron.daily は 以下の条件で起動される。
1. anacronが起動されたタイミングで
2. /var/spool/anacron/cron.daily に記載された日付が、現在時刻より1日以上前の状態で
3. 3-22時の場合に
4. 遅延5分＋ランダム時間（0-45分）待った後に実行される。
 ＊anacronはcron.houry経由で1時間おきに起動される。

当然ながらなんでこんな設定になったかは理由がある。
 聞いた話では、RHEL6は仮想環境で動かされる(ゲストとして稼働する)事を強く意識しており、
 同一ホストで複数のRHELが動いている場合に、同じ時間に一斉にログローテーションが走る事を避けるため（らしい

同じような仮想化環境下での負荷軽減の仕組みとして、Tickless という割り込み頻度を下げる仕組みも導入されている。

●RHEL6 cron/anacron 注意事項まとめ 
1. cron.{daily|weekly|monthly} 以下に置いたファイルは、
 実行時間が指定されていないため、いつ実行されるかわからない。

2. 明示的に実行タイミングを指定したい場合は、
/etc/cron.d
 /etc/crontab
 /var/spool/cron (crontab -e)
にて指定すること。

3. デフォルト登録されているログローテーション等の処理時間を固定化したい場合、crontabに実行時間を書くと、今までどおりの動作になる。 


●RHEL6での動作
RHEL6では、毎時実行するべきジョブは、/etc/cron.d/0hourlyの設定ファイルに仕込まれています。
/etc/cron.d/0hourly (RHEL6)
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
01 * * * * root run-parts /etc/cron.hourly

そして、その実体は、/etc/cron.hourly/以下になり、ここにanacronコマンドの定期実行が仕込まれています。
/etc/cron.hourly/0anacron (RHEL6)
#!/bin/bash
#in case file doesn't exist 
if test -r /var/spool/anacron/cron.daily; then
    day=`cat /var/spool/anacron/cron.daily`
fi
if [ `date +%Y%m%d` = "$day" ]; then
    exit 0;
fi

# in case anacron is already running,
# there will be log (daemon won't be running twice).
if test -x /usr/bin/on_ac_power; then
    /usr/bin/on_ac_power &> /dev/null
    if test $? -eq 1; then
    exit 0
    fi
fi
/usr/sbin/anacron -s

#------------------------------------------------------------------------------
cronでスクリプトを定期実行させるときに注意したい4つのこと
先日、ジョブで実行する予定のスクリプトをcronで実行した際にちょっとハマったので、cronでスクリプトを実行させる際に気をつけたい事をまとめることにした。

1.パスは絶対パス指定で書くこと
スクリプト本体や引数でファイルを指定する場合は、相対パスでの記述だとうまく動作しない事があるため、絶対パス指定で記述をする。
これはスクリプトのソースにも当てはまるので、うまく動かない場合はスクリプト内で相対パスで記述されていないかを確認してもらいたい。

2.cronのログを確認する
無事に動作しているか、cronのログを確認する。
cronのログはOSによって書き出される場所が違う。
・RHEL系の場合 … /var/log/cron
・Debian/Ubuntuの場合 … /var/log/syslog
・Solarisの場合 … /var/cron/log
・HP-UXの場合 … /var/adm/cron/log
・AIXの場合 … /var/adm/cron/log

3.LANGの違い
cronでは環境変数LANGの設定がされていないため、スクリプト内で日本語が利用されている場合は対応する必要がある。
 実行内容を記述する際に、以下のようにする。
* * * * * export LANG=ja_JP.UTF-8; スクリプトのパス
※exportで指定しているLANGの値は、スクリプトで記述されている文字コードに併せて変更すること。

上記の書き方の他、cronの最初にLANGを宣言する事で、cronで実行される全てに設定を適用することも出来る。
LANG=ja_JP.UTG-8
* * * * * スクリプトのパス
…

4.メッセージの出力を抑える
cronでただスクリプトを実行すると、cronの実行結果などがメールされてしまう。
これを抑えるため、スクリプトのパス以降に、以下のように記述すると良いだろう。
* * * * * スクリプトのパス >/dev/null 2>&1
