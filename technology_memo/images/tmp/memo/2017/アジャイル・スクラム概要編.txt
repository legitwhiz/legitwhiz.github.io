第1弾！　アジャイル・スクラム概要編

【目的】

以下の概要を理解することを目的とします。

　・アジャイルとは何か？
　・なぜ今、アジャイルなのか？
　・スクラムとは何か？
　

過去から現在に至るまで、私たちは一般的にウォーターフォール(WF)型と呼ばれる方法でプロジェクトを遂行しています。

 一方で、主に海外ならびに国内Web/Mobileアプリ系開発では、“アジャイル開発”というWF型とは違う
方法で開発プロジェクトを遂行している、ということを耳にする機会が多いかと思います。最近は、通信キャリアのお客さまでもアジャイル開発している、という記事も目にします。アジャイル開発の方法としては、スクラム開発、XP、リーン開発、エンタープライズ・スクラムなど色々なキーワードがあり、
非ウォーターフォール型というぼんやりとしたイメージしかない、という方も多いかと想定しております。

このeSchoolコースは、以下の概要を理解することを目的とします。
アジャイルとは何か？
なぜ今、アジャイルなのか？
スクラムとは何か？ 

###########################################################
アジャイルとは何か？

###########################################################
アジャイル開発とは？
アジャイル開発とは、いくつもの開発の進め方(方法)を総称したものです。
具体的に開発方法として体系化されたものが多数あり、代表的な開発方法として、スクラム(Scrum)やエクストリーム・プログラミング(XP)があります。

アジャイル開発は、手順を定義したものではありません。
ソフトウェア開発をよりよくするために、例えば、顧客・開発チームが何を重視すべきかを共有し、ビジネス価値を最大化するために、最も合理的なチームの作り方や 開発の進め方を考えるためのフレームワーク
（取り組むべき「考え方」や「姿勢」）を集めたものです。 


###########################################################
アジャイル開発を誤解しないために

大切なことは、アジャイル開発の考え方や姿勢をしっかりと理解し、自分のプロジェクトに当てはめて考え、実践してみる、ということになります。考え方や姿勢をメンバー全員で共有した上で、実践を通じて仕組みや仕掛けを工夫して作っていくことが必要になります。
従って、実際にアジャイル開発する、と言っても、 開発するものやビジネスの状況、チームメンバーの性質など、プロジェクトごとに内容は変わってきます。
アジャイル開発に取り組んでうまくいった進め方があるので、自分たちもそれと同じようにやってみたがうまくいかなかった、という事例も多くありますので、注意が必要です。
アジャイル実践にあたっては、従来の思考・発想を変えていかなければ成功しない、と考えておくべきです。 

###########################################################
アジャイル”誕生に至るまで 「軽量(lightweight)ソフトウェア開発手法」と総称されていた関係者が2001年2月11日に、
ユタ州のソルトレイクシティ近郊のスノーバードというところに集まり、みんなで考えたのが
アジャイル・マニフェスト(Agile Manifesto)です。“アジャイル(Agile)”という言葉は、
この時に誕生しました。（※ 軽量という言葉が好きではない、というが発端です！）

"アジャイル” に至るまでのマイルストーン
1992　　　1993　　　1994　　　1995　　　1996　　　1997　　　1998　　　1999　　　2000　　　2001
1992 クリスタル(Crystal Methods) 　by Alistair Cockburn
1999 エクストリーム・プログラミング(XP)　by Kent Beck
2001 アジャイル・マニフェスト
1995 スクラム(Scrum) 　by Jeff Sutherland & Ken Schwaber
1999 適応型ソフトウェア開発 　by Jim Highsmith
1994 動的システム開発方法論(DSDM) 　by DSDM Consortium
1993 リファクタリング(Refactoring) 　by  Bill Opdyke
1997 ユーザー機能駆動開発(FDD)　by  Jeff De Luca
1995 ペア開発 (Pair Development)  by Jim Coplien

【参考】
2002年： テスト駆動開発 (Test Driven Development) 
         プランニングポーカー (Planning Poker)
2003年： リーンソフトウェア開発 (Lean Software Development)

###########################################################
“アジャイル”生みの親
アジャイル・マニフェストは、17人のソフトウェア開発者により執筆されました。
17人のうち、あなたは何人を知っていますか？　　なぜ日本人がいないのでしょうか？

###########################################################
アジャイル・マニフェスト(4つの価値)
アジャイル・マニフェストは、4つの価値と12の原則からなります。
以下が、何に価値を置くべきかを宣言した4つの価値です。

・プロセスやツールよりも個人と対話を、
　（Individuals and interactions over processes and tools.）
・包括的なドキュメントよりも動くソフトウェアを、
　（Working software over comprehensive documentation.）
・契約交渉よりも顧客との協調を、
　（Customer collaboration over contract negotiation.）
・計画に従うことよりも変化への対応を、
　（Responding to change over following a plan.） 

この根底には、予想の難しい「変化」を当然あるものととらえ、変化を味方につけて価値を最大化する、
という考えがあります。

※アジャイルソフトウェア開発宣言
　http://www.agilemanifesto.org/iso/ja/

###########################################################
アジャイル・マニフェスト(12の原則)

以下が、アジャイル・マニフェストの12の原則です。
①顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。

②要求の変更はたとえ開発の後期であっても歓迎します。
変化を味方につけることによって、お客様の競争力を引き上げます。

③動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。

④ビジネス側の人と開発者は、プロジェクトを通して日々一緒に働かなければなりません。

⑤意欲に満ちた人々を集めてプロジェクトを構成します。
環境と支援を与え仕事が無事終わるまで彼らを信頼します。

⑥情報を伝えるもっとも効率的で効果的な方法はフェイス・トゥ・フェイスで話をすることです。

⑦動くソフトウェアこそが進捗の最も重要な尺度です。

⑧アジャイル・プロセスは持続可能な開発を促進します。
一定のペースを継続的に維持できるようにしなければなりません。

⑨技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。

⑩シンプルさ（ムダなく作れる量を最大限にすること）が本質です。

⑪最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。

⑫チームがもっと効率を高めることができるかを定期的に振り返り、それに基づいて自分たちのやり方を最適に調整します。

###########################################################
ウォーターフォール開発との対比

ウォーターフォール開発の主な特徴は、以下になります。
● 工程を時系列に分割して管理する
● 前工程が完了してから後工程を開始する

ウォーターフォール開発のメリットとデメリットは、以下になります。
● メリット：　適用事例が多く、予算・要員の計画が初期に立てやすい
● デメリット：前工程へ手戻りすると大きな影響が出る

デメリットを解決するために、特に工程の最上流である要件定義や設計工程で、出来る限り手戻らないように、要件や設計をFIX(凍結)する、という手法を一般的に採ります。
（※ 私たちSIerがPJ運営上で大事だと言っているノウハウの一つです。）

しかし一方で、クラウドやソーシャル・ネットワーク、スマートフォンなどがビジネスを取り巻く環境や市場を急速に激変させており、FIXした要件がPJ完了する頃には大きく変わってしまい最大価値のものがデリバリーできない、というような事態が発生しています。（価値あるものが顧客に提供できない）

また手戻りできないことから、『将来~かもしれないので、要件として~を加える』というような発想が生まれ、使うかどうかも分からないようなムダな要件を加え、時間をかけて開発・デリバリーする、というような事態も多く発生しています。　（ムダが多い/早く提供できない）

このような背景から、変化を味方につけることを考えの根底にしている“アジャイル開発”が注目されるようになりました。（ウォーターフォール開発を否定している訳ではありません。）

###########################################################
代表的なアジャイル開発方法

以下に、代表的なアジャイル開発方法である、スクラム(Scrum)とエクストリーム・プログラミング(XP)を簡単に紹介します。

 スクラム(Scrum) エクストリーム・プログラミング(XP) 提唱者 Jeff Sutherland 
Ken Schwaber Kent Beck フレームワーク 概要 以下の要素から構成される。 ●3つの柱 ・透明性 ・検証 ・適応 ●役割 ・プロダクト・オーナー ・開発チーム ・スクラム・マスター ●イベント ・スプリント ・スプリント計画 ・デイリー・スクラム ・スプリント・レビュー ・スプリント・レトロスペクティブ(振り返り) ●成果物 ・プロダクト・バックログ ・スプリント・バックログ ・インペディメント・リスト ・出荷可能製品 他5つの価値と19のプラクティスから構成される。 ●5つの価値 ・コミュニケーション ・シンプル ・フィードバック ・勇気 ・尊重 ●19のプラクティス ・テスト駆動開発 ・ペアプログラミング ・リファクタリング ・ソースコードの共同所有権 ・継続的インテグレーション ・YAGNI (You Are Going to Need It.
　　　　　今必要なことだけを行う) ・週40時間 ・反復 ・振り返り ・ストーリーの作成 ・計画ゲーム ・小規模リリース　　他 ※ウォーターフォール開発でも、上記プラクティスの一部を実践している、という方は多いのではないでしょうか。

┌────────┬──────────────────┬───────────────────┐
│開発方法        │ スクラム(Scrum)                    │ エクストリーム・プログラミング(XP)   │
├────────┼──────────────────┼───────────────────┤
│提唱者          │ Jeff Sutherland                    │Kent Beck                             │
│                │ Ken Schwaber                       │                                      │
├────────┼──────────────────┼───────────────────┤
│フレームワーク  │ 以下の要素から構成される。         │ 5つの価値と19のプラクティス          │
│概要            │                                    │ から構成される。                     │
│                │ ●3つの柱                          │                                      │
│                │ ・透明性                           │ ●5つの価値                          │
│                │ ・検証                             │ ・コミュニケーション                 │
│                │ ・適応                             │ ・シンプル ・フィードバック          │
│                │                                    │ ・勇気                               │
│                │ ●役割                             │ ・尊重                               │
│                │ ・プロダクト・オーナー             │                                      │
│                │ ・開発チーム                       │ ●19のプラクティス                   │
│                │ ・スクラム・マスター               │ ・テスト駆動開発                     │
│                │                                    │ ・ペアプログラミング                 │
│                │ ●イベント                         │ ・リファクタリング                   │
│                │ ・スプリント                       │ ・ソースコードの共同所有権           │
│                │ ・スプリント計画                   │ ・継続的インテグレーション           │
│                │ ・デイリー・スクラム               │ ・YAGNI (You Are Going to Need It.   │
│                │ ・スプリント・レビュー             │         今必要なことだけを行う)      │
│                │ ・スプリント・レトロスペクティブ   │ ・週40時間                           │
│                │   (振り返り)                       │ ・反復                               │
│                │                                    │ ・振り返り                           │
│                │ ●成果物                           │ ・ストーリーの作成 ・計画ゲーム      │
│                │ ・プロダクト・バックログ           │ ・小規模リリース                     │
│                │ ・スプリント・バックログ           │ 他                                   │
│                │ ・インペディメント・リスト         │                                      │
│                │ ・出荷可能製品                     │ ※ウォーターフォール開発でも、       │
│                │                                    │ 上記プラクティスの一部を実践してい   │
│                │                                    │ る、という方は多いのではないでしょ   │
│                │                                    │ うか。                               │
└────────┴──────────────────┴───────────────────┘


###########################################################
アジャイル開発方法の活用率 (調査結果)

2014年に米国VerisonOne社が行った調査報告「State of Agile Survey」によると、調査対象組織
(ワールドワイド)の94%がアジャイル開発を実践しており、うち約7割がスクラム(Scrum)を活用して
いる、と回答しています。現時点では、”アジャイル開発　イコール　スクラム”と言われています。 

Scram 56%
Scram/XP ハイブリッド　10%
カスタム ハイブリッド　8%
Scrumban　6%
Kanban　5%
Interative Development 4%
Lean Development 3%
FDD　1%
DSDM　1%
XP　1%

###########################################################
大規模アジャイル開発方法の活用率 (調査結果)

アジャイル開発を大規模開発にスケーリングするということは、昨今の課題でもあり、前ページの
調査報告「State of Agile Survey」でも2014年度に初めてその活用率を調査しています。
大規模開発においてもスクラム(Scrum)が主流である、という回答結果になっています。

Scram/Scram of Scram 69%
独自方法　25%
Scaled Agile Framework(SAFe) 19%
Lean management 18%
Enterprise Agile 10%
Enterprise Scram 9%
Agile Portfolio Management(APM) 9%
Diskplined Agile Delivery(DAD) 4%
Large-Scale Scram(LeSS) 3%

###########################################################
なぜ今、アジャイルなのか？

###########################################################
アジャイル後進国　日本

2001年にアジャイル・マニフェストが宣言されて以降、アジャイル先進国である欧米諸国では、アジャイル開発を源泉としてAmazon社、Google社、Facebook社を始めとしてグローバル企業が更なる競争力をつけてきました。（※米国は、アジャイル・マニフェスト執筆者17人のうち15人を占める。）

一方で日本は、依然としてウォーターフォール開発が主流を占め、2010年時点でも一部のアジャイル・プラクティス(スタンドアップ・ミーティング、継続的インテグレーション、リファクタリングなど)を選択的に活用する程度で、スクラムやXPなどの開発方法で開発することはごくごく稀な状況でした。

2012年時点でも、スクラム(Scrum)の認定資格者数でみると、日本は極めて少ない状況でした。

●認定スクラムマスター(CSM)/認定プロダクト・オーナー(CSPO) 資格取得者(2012年3月時点)

 　　　　　世界：CSM 150,000人 CSPO 20,000人 (参考)PMP 627,000人(2014/7時点)
 　　　　　米国：CSM 67,000人 CSPO 8,000人
 　　　　　英国：CSM 11,800人 CSPO 1,800人
 　　　　　中国：CSM 3,800人 CSPO 400人
 　　　　　日本：CSM 350人 CSPO 120人 (参考)PMP   32,000人(2014/7時点) 

しかしアジャイルを開発手法として採用する流れは、日本でも最近になってやっと前進し、特に楽天やリクルートに代表されるWebサービスをコア事業としている業種やネットゲーム業界を中心に、広まりつつあります。ソーシャル・ネットワーク、クラウド、スマートフォンなどがビジネスを取り巻く環境を激変させていることで、開発手法にまで影響が及んでいることは確かです。

###########################################################
アジャイル開発で得られる効果

2014年に米国VerisonOne社が行った調査報告「State of Agile Survey」によると、アジャイル開発を採用している理由の回答トップ５は、以下のとおりです。

 　　① 製品デリバリーの加速化　（59%）
 　　② 優先度を変更できることの拡張性・柔軟性　（56%）
 　　③ 生産性の向上　（53%） 　　④ ソフトウェア品質の向上　（46%）
 　　⑤ デリバリーの予測精度向上　（44%）

 ※VersionOne Inc.：The 9th Annual State of Agile Report
　http://info.versionone.com/state-of-agile-development-survey-ninth.html

 アジャイル開発を採用すれば、これらの効果が得られると一般的には期待されます。
 しかし前述したとおり、アジャイル開発はあくまでもフレームワーク（取り組むべき「考え方」や「姿勢」）を提供しているに過ぎず、他の成功例を単に踏襲すれば必ず同じような効果が得られるという訳ではない、ということに注意しなければなりません。 

###########################################################
アジャイル開発で得られる効果の本質

 前ページにある、アジャイル開発を採用している理由の回答トップ5のうち、以下の2つはウォーターフォール開発においても追い求めている課題である、ということが分かります。

 　　　③　生産性の向上　（53%）
 　　　④　ソフトウェア品質の向上　（46%）

 変化へスピーディーに対応しつつ生産性や品質を更に向上させる、ということがアジャイル開発の効果として期待できるのはなぜでしょうか？
ここに、今なぜ、アジャイルなのか？の大きな秘密があります。

 アジャイル開発は、自律的・自己組織的なチームとなるようにチームを導きます。チームの全員がリーダーシップを発揮します。
指示を待っているチーム・メンバーの姿は、そこにはありません。
『そんなこと聞いていない』というような言葉は消え去ります。
このようなチームであれば、生産性や品質を従来よりも向上できる可能性はかなり高いのではないでしょうか？
 アジャイル開発という考え方を起点に、そのようなチーム、広い意味で言えば組織の変革が実現できるのではないか、ということが言われています。この点も、経営者層やマネージャ層に大きな期待を与えている背景の一つです。 
アジャイル開発は、人のモチベーション、技術に対する誇り、人が持つ「良いものを作ろう」と考える向上心を大切にします！

###########################################################
スクラムとは何か？

###########################################################
スクラムの定義

 スクラムの定義：
　複雑で変化の激しい問題に対応するためのフレームワークであり、
　可能な限り価値の高いプロダクトを生産的かつ創造的に届けるためのものである。

 　1990年代初頭から複雑なプロダクト開発の管理に使用されてきたプロセスフレームワークです。
 　プロダクトを構築するプロセスや技法ではなく、さまざまなプロセスや技法を取り入れることのできるフレームワークです。
これらのプロダクト管理や開発プラクティスの相対的な有効性を明確にし、改善を可能にします。
 　スクラムフレームワークは、スクラムチームとその役割・イベント・成果物・ルールで構成されています。それぞれに目的があり、スクラムの成功や利用に欠かせないものです

【参考】
　スクラム・ガイド（by Jeff Sutherland and Ken Schwaber ）日本語版：
　http://www.scrumguides.org/docs/scrumguide/v1/Scrum-Guide-JA.pdf

###########################################################
スクラムのルーツ

スクラム提唱に至るまでの間、その発想に大きな影響を与えている要素として、私たちが注目すべき2つのものがあります。

 lThe New New Product Development Game（1986年）
 　　一橋大学名誉教授である野中郁次郎氏と竹内弘高氏による論文。
　　スクラムの用語の起源は、この論文にあります。
　　キヤノンやホンダの新製品開発のプロセスが、まるでラグビーのようにボールを前後に回しながら
　　チームで一丸となってボールを運んでいるようだ、ということをヒントにしています。

lトヨタ生産方式（Toyota Production System） 
　　トヨタ生産方式(TPS)の英語訳本が1983年に出版されて以降、欧米ではTPSの研究がさかんに
　　行われた、という経緯があります。スクラムも、このTPSの考え方に大きく影響を受けています。

###########################################################
スクラム・フレームワーク

スクラムの主要な構成要素を、以下に図示します。 

スクラム・フレームワーク外観図

プロダクト・ バックログ・ リファインメント：イベント 
プロダクト・バックログ：成果物
プロダクト・オーナー：役割 

スプリント計画：イベント 
スプリント・バックログ：成果物
スクラム・マスター,開発チーム：役割 

デイリー・スクラム：イベント 
スプリント：イベント 
スクラム・マスター,開発チーム：役割 
出荷可能製品：成果物

スプリント・レビュー：イベント 
スクラム・マスター,開発チーム：役割 

スプリント・レトロスペクティブ：イベント 
スクラム・マスター,開発チーム：役割 

###########################################################
スクラムの3本柱

 スクラムを実践する上での重要な3本柱があります。
最低限、これらを実施していなければスクラムを実践しているとは言えない、というものです。

 l透明性（Transparency）
 結果責任を持つ者に対して見える化されていることである。
透明性とは、こうしたことが標準化され、見ている人が共通理解を持つことである。

 l検査（Inspect）
 スクラムのチームは、スクラムの作成物や進捗を頻繁に検査し、変化を検知する。

 l適応（Adapt）
 プロセスの不備が許容値を超え、成果となるプロダクトを受け入れられないと検査人が判断した場合は、プロセスやその構成要素を調整する必要がある。調整はできるだけ早く行い、これ以上の逸脱を防がなければいけない。

 これらのことから、

 スクラムは、常に現状が把握できるフレームワークである

 とも言われています。ここで気をつけなければならないのは、現状を把握した上で、しかし認識した
問題を解決する方法を考えるのは人(スクラム・チーム)であり、スクラムというフレームワークが
何かその問題に対する正解を出してくれる訳ではない、ということです。

###########################################################
スクラム・チーム

 徹底的に透明化を図ると、誰がチームに貢献していて誰が足を引っ張っているか、チームをよくして
いるのは誰で苦しめているのは誰か、そういうことがスクラムでは全て、目に見えることになります。

ここでチーム内に疑心や不信が生まれるであろう、と一般的には考えるかと思います。
 しかしなぜ、スクラムを採用している組織は、チームの生産性や品質を向上できることを大きく期待
できるに至るのでしょうか？　スクラムを実践・成功する上での大きな鍵がここにあります。

 高い目標を掲げ、主体的に動き、メンバーそれぞれのスキルを常に活用していけるチームをどう作ればよいのでしょうか？　スクラムの提唱者の一人、ジェフ・サザーランドは、優れたチームには以下の
3つの要素が必要である、と言っています。

 　　●卓越した目的意識があること
　　　　平凡なレベルでよしとしない決意、すばらしい仕事をするという決意そのものが、
　　　　みずからを見つめる目を変え、能力をも変えることができる。

 　　●主体的でいられる自由があること
　　　　自分が一番いいと思う方法で仕事を進められる自由がある。

 　　●仕事をこなすのに必要なスキルがチームに備わっていること
　　　　必要な仕事はチーム内ですべてできるようになる。役割の分断はない。

 非難する相手を探すのではなくシステムの悪い点を見つけて改善すること、好ましくない行動を誘発し低いパフォーマンスを増長するようなシステム自体を変えることの方が大切だ、ということです。
また、チーム全員がそのように仕事できるような環境にしなければ、期待した効果は得られません。

###########################################################

スクラムの役割
スクラム・チームは、3つの役割から構成されます。
誰がプロジェクト・マネージャ(PM)やプロジェクト・リーダー(PL)なのか、という定義はありません。

プロダクト・オーナー
スクラム・マスター
開発チーム
###########################################################
スクラムの役割(スクラム・マスター) 
前述したようなスクラム・チームを育てるのが、スクラム・マスターになります。

主なミッション・タスク・特徴

スクラムの理解と成立に責任を持つ
 そのためにスクラム・チームにスクラムの理論、プラクティス、ルールを守ってもらうように
する。　（但し、ルールを定めるのはあくまでもスクラム・チーム全員である。）

 プロダクトオーナーを支援する
 　●効果的なプロダクト・バックログ(プロダクトに必要なものがすべて並べられた一覧)の管理方法を探す。
 　●明確で簡潔なプロダクト・バックログ・アイテムの必要性について、スクラムチームに理解してもらう。
 　●プロダクト計画について理解する。
 　●価値を最大化するためにプロダクト・バックログを調整する方法を知っている。
 　●必要に応じてスクラム・イベントをファシリテートする。

 開発チームを支援する
 　●自己組織化・機能横断的な開発チームをコーチする。
 　●開発チームが価値の高いプロダクトを作れるように支援する。
 　●開発チームの進捗を妨げるものを排除する。
 　●必要に応じてスクラム・イベントをファシリテートする。
 　●スクラムがまだ完全に適用・理解されていない組織環境で、開発チームをコーチする。

 組織を支援する
 　●組織へのスクラムの導入を指導・コーチする。
 　●組織へのスクラムの導入方法を計画する。
 　●スクラムや経験的プロダクト開発を社員や関係者に理解・実施してもらう。
 　●スクラム・チームの生産性を高めるような変化を促す。
 　●他のスクラム・マスターと一緒に組織におけるスクラム導入の効果を高める。 


###########################################################
スクラムの役割(プロダクト・オーナー/開発チーム) 

スクラム・マスター以外に、プロダクト・オーナーと開発チームという役割があります。

プロダクト・オーナー
主なミッション・タスク・特徴

開発チームの作業とプロダクトの価値の最大化に責任を持つ

 プロダクト・バックログ(プロダクトに必要なものがすべて並べられた一覧)の管理に責任を持つ
1人の人間である。
 プロダクト・バックログの管理には、以下のようなものがある。
 　●プロダクト・バックログ・アイテムを明確に表現する。
 　●ゴールとミッションを達成できるようにプロダクト・バックログ・アイテムを並び替える。
　　（優先度を付ける。）
 　●開発チームが行う作業の価値を最適化する。
 　●プロダクト・バックログを全員に見える化・透明化・明確化し、スクラムチームが次に行う作業を示す。
 　●必要とされるレベルでプロダクト・バックログ・アイテムを開発チームに理解してもらう。

開発チーム 
主なミッション・タスク・特徴

生産性を上げる責任がある

 以下のような特徴がある。
 　●自己組織化されている。
 　●機能横断的である。出荷可能製品を作成するスキルをチームとしてすべて備えている。
  　●テストやビジネス分析のような領域であっても、そのサブチームはない。
 　●メンバーに専門能力や専門分野があったとしても、最終的な責任は開発チーム全体が持つ。
 　●7±2人が1チームの構成人数として妥当である。
※ プロダクト・オーナーの役割はSIerではなくお客さまである、という決めつけは捨てましょう！
###########################################################
スクラム・イベント 
スクラム・イベントは、規則性を作り出す契機となります。
イベントは、上限時間を決めタイムボックス化して実施します。

プロダクト・ バックログ・ リファインメント：イベント 
プリント計画：イベント 
デイリー・スクラム：イベント 
スプリント：イベント 
スプリント・レビュー：イベント 
スプリント・レトロスペクティブ：イベント 


###########################################################
スプリント

 スクラムは、スプリントと呼ばれる周期で開発を構成します。
これらの繰り返し期間(スプリント)は1カ月未満で、途切れることなく連続します。
作業完了の有無に関わらず、具体的な期日で終了します。決して延長しません。

※ ウォーターフォール型とアジャイル型との差異を、この周期の観点だけで見てしまうと、アジャイル
　 開発の本質を見誤る可能性があります。確かに差異が分かり易いので強調される点ではありますが、
　 そこだけに目を向ける、ということは避けましょう。
###########################################################
スプリント以外のスクラム・イベント

 スプリント以外のスクラム・イベントは、何かを検査・適応(3本柱の2つ)するための公式な場です。
これらのイベントがなければ、透明性は低下し、検査・適応する多くの機会を失うことになります。

●スプリント計画
スプリント計画で、スプリントで実施する作業を計画する。
　・プロダクト・バックログに基づきスプリントで開発する項目を検討する
 　・選択したプロダクト・バックログ・アイテムとそれらを届ける計画を合わせて、
　　スプリント・バックログを作成する。

●デイリー・スクラム
毎日、同じ時間・場所で手短に開催する。（全体で15分間以下）
 開発チームのメンバーが以下のことを説明する。
 　前のデイリー・スクラムから何を完了したのか。
 　・次のデイリー・スクラムまでに何を完了させようと考えているのか。
 　・現在、止まっていることや障害になっていることは何か。
 開発チームはデイリー・スクラムを使って、スプリントのゴールとスプリント・バック
ログの作業の進捗を検査する。必要に応じて、デイリー・スクラムの終了直後に集まり、スプリントの残作業について詳細な議論・適応・再計画を行うこともある。

●スプリント・レビュー 
スプリントの終わりに出荷可能製品の検査と、必要であればプロダクト・バックログの適応(見直し変更のこと ※)を行うものである。
 スプリントの成果とプロダクト・バックログの変更を参考にして、価値を最適化するために次に何ができるかを参加者全員で話し合う。
 （※）正式には、“プロダクト・バックログ・リファインメント“という別イベントで実施する。

●スプリント・レトロスペクティブ
スクラム・チームの検査と、次のスプリントの改善計画を作成する場である。
 スプリント・レビューが終わって、次のスプリント計画が始まる前に行う。
以下の目的がある。
 　人/プロセス/ツールの観点から、今回のスプリントを検査する(振り返りのこと)。
 　うまくいった項目や今後の改善が必要な項目を特定・整理する。
 　スクラム・チームの作業の改善実施計画を作成する。

###########################################################
Appendix
【参考】スクラム書籍
スクラムをもっと深く知りたいという時に参考となる書籍としては、以下を推薦します。

スクラム実践入門 成果を生み出すアジャイルな開発プロセス
    2015/3/18 貝瀬 岳志 (著), 原田 勝信 (著)
和島 史典 (著), 栗林 健太郎 (著)
柴田 博志 (著), 家永 英治 (著) 
スクラム入門書としては手頃。
著者は、DeNA、mixi、GMOペパボでスクラム開発に取り組んだ人たち。

スクラム 仕事が４倍速くなる“世界標準”のチーム戦術     2015/6/24 ジェフ・サザーランド (著)
石垣賀子 (翻訳) 
スクラム提唱者の1人である、ジェフ・
サザーランドの翻訳本。
スクラムを提唱するに至った経緯、スクラムがIT業界だけのフレームワークではない、ということを理解するには最適。

エッセンシャル スクラム アジャイル開発に関わるすべての人のための完全攻略ガイド    2014/7/8 Kenneth Rubin (著)
岡澤 裕二 (翻訳), 角 征典 (翻訳)
高木 正弘 (翻訳), 和智 右桂 (翻訳) 
スクラムを実践する中で手元に置いておき、いざという時に読みたいという網羅された教科書としては手頃。

###########################################################
スクラム提唱者は、スクラムを提唱する際に世界を代表する日本企業の生産方式をヒントにしています。
徹底したムダの排除を原則とし、カンバンやアンドン、5回のなぜ、などの手法を確立した日本企業とは、どこでしょうか？
1トヨタ
2ソニー
3パナソニック
4キヤノン

１
###########################################################
スクラムでは、自律的・自己組織的なチームを育成することも実現しようとします。
そのようなチームにおいて、メンバーから発せられる言葉として適切なものを選択してください。
1『本日はAさんが急病で欠勤なので、私がこのタスクを対応します。』
2『私たちの目標は、11月末までにモジュールを商用リリースすることです。』
3『本日はAさんが急病で欠勤なので、Bさん、本日はこのタスクの対応をお願いします。』
4『私は、ネットワーク担当です。』
5『私の目標は、Jenkinsという継続的インテグレーションツールの習得です。』
6『昨日の件を踏まえ、今後、このルールを遵守してください。』
２、１
###########################################################
最低限、これらを実施していなければ実践しているとは言えない3本柱が、スクラムにはあります。
その3本柱とは、何でしょうか？
1透明性（Transparency）
2デイリー・スクラム（Daily Scrum Meeting）
3スプリント（Sprint）
4検査（Inspect）
5Doneの定義（Definition of Done）
6適応（Adapt）

選択した答え
1,4,6 



###########################################################
アジャイル開発方法のうち、一般的に主流と言われているフレームワークは何でしょうか？
1クリスタル(Crystal Methods)
2エクストリーム・プログラミング (XP)
3スクラム(Scrum)
4リーンソフトウェア開発 (Lean Software Development)

３
###########################################################
A社で、アジャイル開発の成功事例発表があり、どのようなプラクティスを実施したかを理解した。
そのまま同じプラクティスを自分たちのプロジェクトに適用した場合、成功する可能性は高いでしょうか？ 

×
###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################





###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################





###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################





###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################





###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################




###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################




###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################




###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################


###########################################################

























