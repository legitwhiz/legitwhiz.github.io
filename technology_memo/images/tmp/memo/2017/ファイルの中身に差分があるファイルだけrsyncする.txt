ファイルの中身に差分があるファイルだけrsyncする

ファイルの中身に差分がある場合だけrsyncします。ファイルの中身が同じ場合は、
タイムスタンプが違っていてもコピーしません。タイムスタンプの違いは無視です。

1. rsync の checksum オプション
rsyncにchecksumというオプションがあります。

checksum（チェックサム）というのは、転送元と転送先でデータに誤りがないかを確認
する仕組みの事です。 転送元のファイルと転送先のファイルでそれぞれある計算を元に
ファイルのデータから値を算出し、算出した値が一致するかを調べます。 算出した値そ
のものをチェックサムと呼ぶ場合もあります。 

rsyncにchecksumオプションをつけると、コピー元とコピー先でファイルのチェックサム
が確認され、 コピー先で既に存在する同じチェックサムとサイズを持つ同じ名前の
ファイルはスキップされます。 
その結果、ファイルの内容に差分あるファイルだけがコピーの対象となります。

2. 差分ファイルだけrsync
実際に差分ファイルだけを対象に rsync してみます。

rsync 書式
rsync [option] コピー元 コピー先
※　オプションの説明はここでは省略します。

中身は同じで、タイムスタンプが異なるファイルをrsync
中身の同じファイルを作成
# echo aaa > source/test.txt
# echo aaa > dest/test.txt

タイムスタンプを変更
# touch -t 201402040000 dest/test.txt

●中身は同じで、タイムスタンプが異なるファイルがある
# ls -l ./*
./dest:
合計 4
-rw-r--r--. 1 root root 4  2月  4 00:00 2014 test.txt
./source:
合計 4
-rw-r--r--. 1 root root 4  2月  4 09:01 2014 test.txt

checksum オプションをつけてrsyncする
# rsync --checksum -av source/test.txt dest/test.txt
sending incremental file list

sent 52 bytes  received 15 bytes  134.00 bytes/sec
total size is 4  speedup is 0.06

タイムスタンプは異なるが、中身に差分がないのでコピーされない。

●中身は異なるが、同じタイムスタンプで、同じサイズのファイルをrsync
中身が違うファイルを作成
# echo aaa > source/test.txt
# echo bbb > dest/test.txt

タイムスタンプを揃える
# touch -t 201402040000 source/test.txt
# touch -t 201402040000 dest/test.txt

●中身は異なるが、同じタイムスタンプで、同じサイズのファイルがある
# ls -l ./*
./dest:
合計 4
-rw-r--r--. 1 root root 4  2月  4 00:00 2014 test.txt
./source:
合計 4
-rw-r--r--. 1 root root 4  2月  4 00:00 2014 test.txt

checksum オプションをつけてrsyncする
# rsync --checksum -av source/test.txt dest/test.txt
sending incremental file list
test.txt

sent 96 bytes  received 31 bytes  254.00 bytes/sec
total size is 4  speedup is 0.03

中身に差分があるのでコピーされる。


###############################################################################
rsyncのlink-destオプションは便利そうだ

今まであまり知らなかったrsyncコマンドだが、オプションを使いこなすと様々な応用ができそうだ。とりわけあまりメジャーではなさそうなオプション、--link-destは差分バックアップに使えるので覚えておきたい。

このオプションを使用すると、比較対象とコピー先を比べて差分のみをコピーし、変更がないファイルに関してはハードリンクとする。変更がないファイルはすべてハードリンクなのだから、資源の節約にはなる。

しかし自分はこの仕組みを理解するのに、結構手間取った。自信はないがまとめてみよう。まず、以下のコマンドが実行されていることが前提。/org_dir/ディレクトリを/old_dir/ディレクトリにコピーしている。

# rsync -av --delete /org_dir/ /old_dir/

次に以下コマンドを実行してみる。/org_dir/を/backup/ディレクトリにコピーする。しかし/org_dir/と/old_dir/を比較して、変更がないファイルはハードリンクとし、変更があったファイルだけコピーする。

# rsync -av --delete --link-dest=/old_dir/ /org_dir/ /backup/

以下コマンドを実行してみると、/org_dir/内ファイルと/old_dir/内ファイルのハードリンクは別、/old_dir/内ファイルと/backup/内ファイルのハードリンクは全く同じになっているはず。/org_dir/内でファイルを追加してから再度--link-destオプション付きでrsyncすると、差分のみコピーされるはずだ。

# ls -li /org_dir/
 # ls -li /old_dir/
 # ls -li /backup/

参考にしたバックアップにrsync --link-destを使うと良い場合もあるよからそのまま抜粋なのだが、以下のような運用方法が可能となる。

1. 日付を名前にしたディレクトリを作る
2. 前の日のディレクトリを link-destのパラメータに渡して、バックアップ対象のディレクトリを新しいディレクトリにコピーする。


ちなみに「差分のみコピーする」というだけなら-uオプションでもよい。rsyncは他にも様々なオプションがあるので、ついでに書いておく。
-v　コピー中のファイルを表示
-a　アーカイブモード（ファイルやディレクトリの属性をそのままコピー）
※-aオプションをつければ以下rlptgoDオプションは必要なし
-r　ディレクトリ内を再帰的にコピー
-l　シンボリックリンクをそのままコピー
-H　ハードリンクをそのままコピー
-D　デバイスファイルを保ったままコピー
-p　パーミッションを保ったままコピー
-t　タイムスタンプを維持
-o　オーナーをそのまま維持
※指定しないとオーナー属性はコピーしたユーザーとなる
-g　グループをそのまま維持
※指定しないとグループ属性はコピーしたユーザーのグループとなる
-n　テストのみ行い、実行結果を表示
-e　実行するコマンドを指定（デフォルトはrsh）
※ネットワーク越しに別のホストにコピーする時に、-e sshなど。

-z　ファイルを圧縮
-u　変更・追加されたファイルのみコピー
--existing　更新されたファイルのみコピー、追加されたファイルは無視
--delete　コピー元ファイルが削除されたらコピー先でも削除
--exclude　指定したディレクトリを除外する
--exclude-from ファイル名　指定したファイルに記載のディレクトリを除外

--excludeに対応して--includeもあり、正規表現の利用で細かい指定もできるらしい。追う程に深いrsyncではあるが、今回はこの辺で。--link-destについては以下も参考にした。

###############################################################################
rsyncケーススタディ——コピー元のディレクトリ名には注意

　では、実際に幾つかのケースを例にとってrsyncを試してみましょう。まず、ローカルマシンのホームディレクトリ以下にあるディレクトリ（ここでは~/dir1/）以下を、外付けのHDD（ここでは/media/disk/）に作成したbackupディレクトリにバックアップしてみます。この場合、コマンドは次のようになります（オプションとして-avを付加しています）。


$ rsync -av ~/dir1/ /media/disk/backup/

　ついミスを犯しやすい点として、コピー元のディレクトリ名を「dir1」と指定するか、「dir1/」とスラッシュ（/）を追加するかで挙動が変わる点が挙げられます。例えば、以下のように指定すると、前者はdir1ディレクトリの中身と、そのディレクトリ自体がコピーされますが、後者はdir1ディレクトリの中身はコピーされますが、ディレクトリはコピーされません。

$ rsync -av ~/dir1 /media/disk/backup/

$ rsync -av ~/dir1/ /media/disk/backup/

　まとめると、
" そのディレクトリも含めてコピーしたい場合：「/」なし
" そのディレクトリ以下のツリーをコピーしたい場合：「/」あり

ということになります。なお、こうした末尾のスラッシュが与える影響を考えなければならないのは、コピー元の指定のみで、コピー先の指定では考慮する必要はありません。

###############################################################################
リモートホストへのバックアップ／同期

次のケースは、ローカルマシンのホームディレクトリ以下にあるディレクトリ（ここでは~/dir1/）以下をリモートホスト（ここではxxx.backup.com）に転送する場合です。まずはコマンドから紹介しましょう。

" sshを用いる場合

$ rsync -av ~/dir1 xxx.backup.com:dir/
" sshを用いない場合（rshで通信する場合）

$ rsync -ave rsh ~/dir1 xxx.backup.com:dir/


　冒頭に説明した「rsync [オプション] コピー元 コピー先」という構文から少し変化している点が2点あることにお気づきになったと思います。1つは、転送方式としてrshを用いている点です。rsyncでは、リモートシェル（デフォルトではssh）経由でリモートホストと通信できます。以前はrshがデフォルトでしたので、セキュリティ上認証や転送を暗号化したいというニーズから「-e ssh」オプションを付加してsshを用いていましたが、デフォルトでsshが利用されるようになったことで、今後、特別な理由がなければ「-e」オプションの利用機会も減っていくことでしょう。もちろんsshを用いるのであれば、リモートホスト側ではsshサーバを起動し、sshで外部からログインできるようにしておく必要があるのはいうまでもありません。

初出時、デフォルトではrshであるとしていましたが、デフォルトはsshに変更されています。おわびして訂正します。
 
　もう1点は、コピー先の部分が「リモートホスト名：バックアップ先のディレクトリ」となっている点です。「リモートホスト名：」の部分がないと、ローカルだと解釈されてしまうことは想像がつきますね。ここはそれほど難しくはないでしょう。

　ただし、上記の方法では、リモートホストにもローカルマシンと同じアカウントが存在していることを前提としています。仮にローカルマシンでuser1というユーザー名で作業しているとするなら、リモートホストにもuser1というアカウントがないと上記のコマンドは期待通りには動作しないでしょう。

　そこで、リモートホストに存在するアカウント（ここではbackupuser）でログインするために、「リモートホスト名：バックアップ先のディレクトリ」の部分を「リモートホストに存在するアカウント@リモートホスト名：バックアップ先のディレクトリ」と変えて実行してみます。

$ rsync -av ~/dir1 backupuser@xxx.backup.com:dir/

　これでようやく、あなたのターミナルには、backupuserのパスワードを尋ねるプロンプトが返ってくるはずです。あとはパスワードを入力すれば、転送がはじまるのを確認できるでしょう。また、ログインのたびにパスワードを入力するのが面倒な方は、sshの公開鍵認証を用いてログインするとよいでしょう。

　rsyncに限らず、バックアップ／同期が失敗すると、大きな損失を被る場合もあります。自分の設定に自信がない場合や失敗が許されないような場合は、「--dry-run」オプションを付けて実行することで、rsyncコマンドのテストが行えますので、まずはこれで試してから本番に移るのがよいでしょう。

###############################################################################
バックアップ対象の除外

バックアップなどを行う際、「このファイル形式はバックアップ対象から除外したい」と思うことは多々あると思います。例えば、スワップファイル（.swp）や自動バックアップファイル（.bak）などです。

　指定した条件にマッチするファイルをコピー対象から除外する（または除外しない）ためのオプションとして、「--filter」や、その簡易版といえる「--exclude」「--include」が用意されています。例えば、.tmpファイルを除外したい場合、「--exclude='*.tmp'」と指定します。さらに、除外対象をテキストファイルとして記述しておき、「--exclude-from」「--include-from」といったオプションを使って読み込ませるのもよいでしょう。また、除外対象をファイル形式ではなく、ディレクトリで指定することも可能です。ただし、その場合、パターンが「/」で終っていなければならないので注意してください。例えば、上記のコマンド例で、*.tmpにマッチするすべてのファイルを除外するようにするなら、以下のようになります。

$ rsync -av --exclude '*.tmp' ~/dir1 backupuser@xxx.backup.com:dir/

###############################################################################
コピーではなく、同期を実現する「--delete」オプション

　rsyncのデフォルトでは、rsyncを最後に実行した後にコピー元でファイルやディレクトリが削除されても、次回rsyncを実行した際、コピー先でも同じようにそれらのファイルやディレクトリが削除されるようにはなっていません。しかし、コピー元とコピー先を完全に同期させたいというケースもあるでしょう。そうした場合は「--delete」オプションを使用します。このオプションを使用することで、rsyncを最後に実行した後に削除されたコピー元のファイルは、コピー先からも削除されます。

$ rsync -av --exclude '*.tmp' --delete ~/dir1 backupuser@xxx.backup.com:dir/

###############################################################################
コピー元とコピー先を入れ替えれば復元に

　すぐ上に示したコマンドは、最初に紹介したものと比べるとかなり長くなっていますが、読み解いてみると、それほど難しいと感じないのではないでしょうか。基本的な構文さえ押さえてしまえば、あとはオプションの意味を逐次確認するだけで、高度なバックアップがコマンドラインからできてしまいます。

　ここまでの解説であなたは、ローカル／リモートを問わず、任意の場所にファイルを転送するための力を手に入れたことになります。では、rsyncを使ってバックアップしたファイルの一部を元に戻すにはどうすればよいのでしょう。はい。簡単ですね。最初の構文、「rsync [オプション] コピー元 コピー先」で、コピー元とコピー先の記述を入れ替えるだけです。上記のコマンド例を利用して話を進めるなら、次のようなコマンドになるでしょう。


$ rsync -av backupuser@xxx.backup.com:dir/ ~/dir1

###############################################################################
rsyncの使い方

　rsyncの基本的な文法はかなりシンプルだ。単に「rsync [options] source destination」とすれば、「source」で指定したファイル（複数可）が「destination」で指定した場所にコピーされる。

　例えば、ホームディレクトリの下にあるファイルをUSBストレージデバイスにコピーしたければ、「rsync -a /home/user/dir/ /media/disk/dir/」とすればよい。ちなみに、rsyncは“/home/usr/dir/”と“/home/usr/dir”を区別する。最後のスラッシュがない場合、rsyncはそのディレクトリも含めて全体をコピーする。スラッシュがある場合、ディレクトリの中身をコピーするが、ディレクトリそのものは作られない。例えば、/var/wwwを別のマシンか何かにミラーリングするなど、rsyncを使ってディレクトリ構造を複製しようとする場合は、最後のスラッシュを除く必要があるわけだ。

　上の例では、アーカイブオプション（-a）を指定している。これは、実際には幾つかのrsyncオプションを結合したもので、再帰コピーとシンボリックリンクコピーの各オプションを含み、グループと所有者の情報を保存する。普通は、アーカイブのコピーに適したオプションだ。ただし、ハードリンクは保存されないので、それらも保存したい場合はハードリンクオプション（-H）を追加する必要がある。

　もう1つ、ほとんどの場合に必要になりそうなオプションが詳細情報の出力（-v）で、これを使うとrsyncによって実行中の処理について多くの情報が表示される。このオプションは2つまたは3つ重ねることができる。つまり、-vとするよりも-vvとする方が表示される情報は多く、-vvvとすればrsyncの処理に関するすべての情報が表示される。

　rsyncでは、オプションを何も指定しなくても隠しファイル（ファイル名が“.”で始まるもの）のコピーが行われる。隠しファイルを除外したければ、--exclude=".*/"というオプションを使えばよい。また、--excludeオプションを使ってVimのスワップファイル（.swp）や自動バックアップファイル（.bak）など一部のプログラムによって作成されたファイルをコピーの対象外にすることもできる。

###############################################################################
ローカルコピーの実行

　USBドライブまたはFireWireドライブがあれば、ホームディレクトリのデータをそうした外部ドライブにコピーしたいと考えるだろう。そのためのよい方法が、重要なデータを1つのトップレベルディレクトリにまとめておき、次のようなコマンドを使ってそのディレクトリを外部ドライブのバックアップディレクトリにコピーすることだ。

rsync -av /home/usr/dir/ /media/disk/backup/

　rsyncを最後に実行した後に削除したローカルファイルが、外部システムからも削除されるようにしたければ、次のように、--deleteオプションを追加する必要がある。

rsync -av --delete /home/user/dir/ /media/disk/backup

　ただし、--deleteオプションの使用にはくれぐれも注意すること。そのつもりがなくても大量のファイルを消してしまう恐れがある。実際、rsyncの使い方に慣れていても、いきなり実際にファイルのコピーや同期化を行うのではなく、--dry-runオプションを使って転送内容の確認を行うとよいだろう。rsyncによる転送を開始してしまってから、コマンドのどこかに間違いがあってデータが破壊される危険があると分かった場合は、すぐに[Ctrl]＋[C]キーを押して転送を中止すること。一部は失われるだろうが、残りのファイルは救えるかもしれない。

###############################################################################
リモートコピーの実行

　手元にないファイルをリモートホストにコピーしたい場合はどうしたらよいだろうか。何も心配はいらない。コマンドにリモートホストとユーザーの情報を追加するだけでよい。例えば、先ほどのディレクトリをリモートホストにコピーしたければ、次のようにする。

rsync -av --delete /home/user/dir/ user@remote.host.com:dir/

　転送速度やコピーすべき残りファイル数を表示するには、次のように--progressオプションを追加する。

rsync --progress -av　--delete /home/user/dir/ user@remote.host.com:dir/

　rsyncによって接続が行われるたびにパスワードを訊かれたくなければ、パスワードではなくSSH鍵を使ってログインするようにrsyncを設定すればよい。そのためには、「ssh-keygen -t dsa」を使ってローカルマシンでSSH鍵を生成し、パスワードの入力を求められたらEnterキーを押す。SSH鍵が生成されたら、「ssh-copy-id -i .ssh/id_dsa.pub user@remote.host.com」を使って公開鍵をリモートホストにコピーする。

　では、rsyncを使ってコピーしたファイルの一部を元に戻すにはどうすればよいか。次のコマンド構文を使えばよい。

rsync -avz remote.host.com:/home/user/dir/ /local/path/

この例では、-zオプションにより、データは圧縮された状態で転送される。コピー中のファイルがローカルホスト上に存在する場合、rsyncはそのファイルに対しては何も行わない。リモートホストにファイルをコピーするときと同じだ。

###############################################################################
スクリプトにまとめる

　同期させたいディレクトリがはっきりしていて、すべての同期に必要なコマンドが分かっているなら、それらをシンプルなスクリプトにまとめるのは容易だ。以下に簡単な例を示す。

rsync --progress -avz --delete /home/user/bin/ user@remote.host.com:bin/
rsync --progress -avz --delete /home/user/local/data/ user@remote.host.com:local/data/
rsync --progress -avz --delete /home/user/.tomboy/ user@remote.host.com:/.tomboy/

　--progressオプションは、rsyncを対話的に実行するために使っているが、その必要がなければ削除して構わない。

　rsyncのmanページを見ただけでは、きっと頭が混乱してしまうだろう。だが、こうして少しでもrsyncの使い方を実践しておけば、rsync処理の設定を行って、いつハードディスクが故障してもすぐにデータにアクセスできるように準備しておくことができるはずだ。
###############################################################################
rsyncのexcludeオプション

rsyncの対象から特定のディレクトリやファイルを除外したい時は、--excludeオプションを利用する。
# rsync -a --exclude 'xxxxx' /var/log/ /backup/

対象が複数の場合は--excludeを繰り返す。
# rsync -a --exclude 'xxxxx' --exclude '*****' /var/log/ /backup/

除外対象が多数ある場合は別途リストファイルを作成し、--exclude-from File　とする。 excludeの指定の仕方だが、--exclude ‘xxxxx’ でも、--exclude =”xxxxx”でもどちらでもいける。また対象はファイルでもディレクトリでもOK。気をつけるとしたら、除外対象はフルパスではなくsync元の相対パスで指定する。sync元ディレクトリの末尾には「/」をつける。

# rsync -a --exclude 'xxxxx' /var/log/ /backup/　←普通こっち
# rsync -a --exclude 'xxxxx' /var/log /backup/　←普通望まない結果に。。

以前の投稿にもうっすら書いてはいるが、つい忘れがちなのでしつこく書いておく。rsyncはよく理解しておかないとハマりまくることになる。nまたは--dry-runオプションで、実際には処理を行わず処理内容を出力してくれるらしい。こういった機能を利用するのもいいだろう。

###############################################################################
いつまでもハマるrsyncのメモ

いつまでたっても魑魅魍魎なrsyncコマンド。いつか参照するかも、なときのために、ちょっとしたネタだがメモしておく。以下は以前の投稿とかぶっているが、rsyncのキモですよ、キモ！！（自分に言い聞かせる）

sync元ディレクトリの末尾には「/」をつけると配下のファイル群がコピーの対象となるが、つけないとそのディレクトリそのものがコピーされてしまう。なおコピー先はスラッシュありなしどちらでも影響ない、はず。

# rsync -avz -e ssh /var/log/ dummy.com:/var/backup/　←普通はこっちにする
# rsync -avz -e ssh /var/log dummy.com:/var/backup/　←普通望まない結果になる

次に、初回のrsync実行時に指定したコピー先ディレクトリが存在しない場合の挙動。第一階層まではコマンド実行時にディレクトリを作成してくれて、syncが成功する。第二階層以上になるとmkdirができないよ、とエラーになる。

 以下は、コピー先にvarディレクトリが存在していなくても成功する。

# rsync -avz -e ssh /usr/local/mysql/var/ dummy.com:/usr/local/mysql/var/

以下は、var/より更に一階層深いパスなのでコケる。
# rsync -avz -e ssh /usr/local/mysql/var/data/ dummy.com:/usr/local/var/data/

最後に、こんなエラー。
rsync error: some files could not be transferred (code 23) 

一般ユーザで-aオプションをつけてrsyncを実行するとこのエラーがでることがある。（コピー元とコピー先のオーナーが違う場合？）当初権限だけでなくオーナーの問題、だとかrootで実行しないとそうなる、とか断片的な情報しか見つからなかったが、以下の説明がドンピシャっぽい。

これはファイルの owner が違っていて変更できなかったといったことのようです。（略）-a は -rlptgoD と等価ですが一般ユーザでは goD オプションは一般に使えないので，-a ではなく -rlpt を指定すればいいのだろうと思います。

※以下より抜粋
http://oku.edu.mie-u.ac.jp/~okumura/networking/rsync.html


ただし上記のエラーは出ても、オーナーの変更ができないのでファイル属性に差分がある状態、になってしまうが、ファイルコピー自体は一応成功する。細かいことにこだわらないのなら無視してもいい、と思われる。ちゃんとしたいなら上記のようにオプションを変えるか、root権限で実行するかしなさいよ、ってところかな。

それにしても知らんかったよ。
まだまだ何かがでてきそうなrsync…。


